> # test.plotmo.R: regression tests for plotmo
> # Many of these tests are culled from man page examples and modified to try to confuse plotmo.
> # Many of the plots are plotted twice so you can visually check by comparing
> # plots in the same window, they should be substantially the same.
> # Stephen Milborrow, Petaluma Jan 2007
> 
> print(R.version.string)
[1] "R version 3.2.1 (2015-06-18)"
> print(citation("rpart.plot"))

To cite package 'rpart.plot' in publications use:

  Stephen Milborrow (). rpart.plot: Plot rpart Models.  An Enhanced
  Version of plot.rpart. R package version 1.5.3.
  http://www.milbo.org/rpart-plot

A BibTeX entry for LaTeX users is

  @Manual{,
    title = {rpart.plot: Plot rpart Models.  An Enhanced Version of plot.rpart},
    author = {Stephen Milborrow},
    note = {R package version 1.5.3},
    url = {http://www.milbo.org/rpart-plot},
  }

ATTENTION: This citation information has been auto-generated from the
package DESCRIPTION file and may need manual editing, see
'help("citation")'.

Warning message:
In citation("rpart.plot") :
  no date field in DESCRIPTION file of package 'rpart.plot'
> 
> library(earth)
Loading required package: plotmo
Loading required package: plotrix
Loading required package: TeachingDemos
> data(ozone1)
> data(etitanic)
> options(warn=1) # print warnings as they occur
> if(!interactive())
+     postscript(paper="letter")
> make.space.for.caption <- function(caption="CAPTION")
+ {
+     oma <- par("oma")
+     needed <- 3
+     # adjust for newlines in caption
+     newlines <- grep("\n", caption)
+     if(length(newlines) > 0)
+         needed <- needed + .5 * newlines # .5 seems enough although 1 in theory
+     if(!is.null(caption) && any(nchar(caption)) && oma[3] <= needed) {
+         oma[3] <- needed
+         par(oma=oma)
+     }
+ }
> dopar <- function(nrows, ncols, caption = "")
+ {
+     cat("                             ", caption, "\n")
+     make.space.for.caption(caption)
+     par(mfrow=c(nrows, ncols))
+     par(mar = c(3, 3, 1.7, 0.5))
+     par(mgp = c(1.6, 0.6, 0))
+     par(cex = 0.7)
+ }
> expect.err <- function(obj) # test that we got an error as expected from a try() call
+ {
+     if(class(obj)[1] == "try-error")
+         cat("Got error as expected\n")
+     else
+         stop("did not get expected error")
+ }
> caption <- "basic earth test of plotmo"
> a <- earth(O3 ~ ., data=ozone1, degree=2)
> plotmo(a, degree1=2, degree2=4, caption=caption, trace=-1)
> 
> caption <- "test 5 x 5 layout"
> dopar(1,1,caption)
                              test 5 x 5 layout 
> a <- earth(O3 ~ ., data=ozone1, nk=51, pmethod="n", degree=2)
> plotmo(a, caption=caption, trace=1)
stats::predict(earth.object, NULL, type="response")
stats::fitted(object=earth.object)
got model response from model.frame(O3~vh+wind+humidi..., data=call$data, na.action="na.fail")

 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5

> 
> caption <- "test 4 x 4 layout with ylab"
> dopar(1,1,caption)
                              test 4 x 4 layout with ylab 
> a <- earth(O3 ~ ., data=ozone1, nk=30, pmethod="n", degree=2)
> plotmo(a, caption=caption, trace=2)
using the environment saved with the earth model: R_GlobalEnv
plotmo trace 2: plotmo(object=a, caption=caption, trace=2)
object$call is earth(formula=O3~., data=ozone1, pmethod="n", degree=2, nk=30)
--plotmo_x for earth object
object$x is NULL (and it has no colnames)
object$call is earth(formula=O3~., data=ozone1, pmethod="n", degree=2, n...
formula(object) is O3~vh+wind+humidity+temp+ibh+dpg+ibt+vis+doy
naked formula is the same
formula is valid, now looking for data for the model.frame
object$model is NULL (and it has no colnames)
object$data is NULL (and it has no colnames)
argument 2 of the call is 'data'
eval(call$data, R_GlobalEnv)
call$data is usable and has column names O3 vh wind humidity temp ibh dpg ibt vis doy
na.action(object) is "na.fail"
stats::model.frame(O3~vh+wind+humidi..., data=call$data, na.action="na.fail")
model.frame[,-1] is usable and has column names vh wind humidity temp ibh dpg ibt vis doy
plotmo_x returned[330,9]:
      vh wind humidity temp  ibh dpg ibt vis doy
1   5710    4       28   40 2693 -25  87 250  33
2   5700    3       37   45  590 -24 128 100  34
3   5760    3       51   54 1450  25 139  60  35
... 5720    4       69   35 1568  15 121  60  36
330 5550    4       85   39 5000   8  44 100 390

----Metadata: plotmo_predict with nresponse=NULL and newdata=NULL
calling predict.earth with NULL newdata
stats::predict(earth.object, NULL, type="response")
predict returned[330,1]:
          O3
1   1.240608
2   3.596894
3   7.464276
... 5.282731
330 3.228830
predict after processing with nresponse=NULL is [330,1]:
          O3
1   1.240608
2   3.596894
3   7.464276
... 5.282731
330 3.228830

----Metadata: plotmo_fitted with nresponse=NULL
stats::fitted(object=earth.object)
fitted(object) returned[330,1]:
          O3
1   1.240608
2   3.596894
3   7.464276
... 5.282731
330 3.228830
fitted(object) after processing with nresponse=NULL is [330,1]:
          O3
1   1.240608
2   3.596894
3   7.464276
... 5.282731
330 3.228830

----Metadata: plotmo_y with nresponse=NULL
--plotmo_y with nresponse=NULL for earth object
object$y is NULL (and it has no colnames)
object$call is earth(formula=O3~., data=ozone1, pmethod="n", degree=2, n...
formula(object) is O3~vh+wind+humidity+temp+ibh+dpg+ibt+vis+doy
naked formula is the same
formula is valid, now looking for data for the model.frame
object$model is NULL (and it has no colnames)
object$data is NULL (and it has no colnames)
argument 2 of the call is 'data'
eval(call$data, R_GlobalEnv)
call$data is usable and has column names O3 vh wind humidity temp ibh dpg ibt vis doy
na.action(object) is "na.fail"
stats::model.frame(O3~vh+wind+humidi..., data=call$data, na.action="na.fail")
model.frame[,1] is usable and has column name O3
plotmo_y returned[330,1]:
    O3
1    3
2    5
3    5
...  6
330  1
plotmo_y after processing with nresponse=NULL is [330,1]:
    O3
1    3
2    5
3    5
...  6
330  1
converted nresponse=NA to nresponse=1
nresponse=1 (was NA) ncol(fitted) 1 ncol(predict) 1 ncol(y) 1

----Metadata: plotmo_y with nresponse=1
--plotmo_y with nresponse=1 for earth object
object$y is NULL (and it has no colnames)
object$call is earth(formula=O3~., data=ozone1, pmethod="n", degree=2, n...
formula(object) is O3~vh+wind+humidity+temp+ibh+dpg+ibt+vis+doy
formula is valid, now looking for data for the model.frame
object$model is NULL (and it has no colnames)
object$data is NULL (and it has no colnames)
argument 2 of the call is 'data'
eval(call$data, R_GlobalEnv)
call$data is usable and has column names O3 vh wind humidity temp ibh dpg ibt vis doy
na.action(object) is "na.fail"
stats::model.frame(O3~vh+wind+humidi..., data=call$data, na.action="na.fail")
model.frame[,1] is usable and has column name O3
got model response from model.frame(O3~vh+wind+humidi..., data=call$data, na.action="na.fail")
plotmo_y returned[330,1]:
    O3
1    3
2    5
3    5
...  6
330  1
plotmo_y after processing with nresponse=1 is [330,1]:
    O3
1    3
2    5
3    5
...  6
330  1
got response name "O3" from yhat
resp.levs is NULL

----Metadata: done

number of x values: vh 53 wind 11 humidity 65 temp 63 ibh 196 dpg 128 ibt 193...

----plotmo_singles for earth object
singles: 4 temp, 5 ibh, 7 ibt, 8 vis, 9 doy 

----plotmo_pairs for earth object
pairs:
      [,1]         [,2]    
 [1,] "1 vh"       "4 temp"
 [2,] "1 vh"       "9 doy" 
 [3,] "2 wind"     "8 vis" 
 [4,] "3 humidity" "4 temp"
 [5,] "4 temp"     "5 ibh" 
 [6,] "4 temp"     "6 dpg" 
 [7,] "4 temp"     "9 doy" 
 [8,] "5 ibh"      "6 dpg" 
 [9,] "7 ibt"      "8 vis" 

graphics::par(mfrow=c(4,4), mgp=c(1.5,0.4,0), tcl=-0.3, font.main=2,
              mar=c(3,2,1.2,0.8), oma=c(0,0,3,0), cex.main=1.1, cex.lab=1,
              cex.axis=1, cex=0.66)

----Figuring out ylim
--get.ylim.by.dummy.plots
--plot.degree1(draw.plot=FALSE)

 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5

degree1 plot 1 temp
newdata[50,9]:
      vh wind humidity     temp    ibh dpg   ibt vis   doy
1   5760    5       64 25.00000 2112.5  24 167.5 120 205.5
2   5760    5       64 26.38776 2112.5  24 167.5 120 205.5
3   5760    5       64 27.77551 2112.5  24 167.5 120 205.5
... 5760    5       64 29.16327 2112.5  24 167.5 120 205.5
50  5760    5       64 93.00000 2112.5  24 167.5 120 205.5
stats::predict(earth.object, data.frame[50,9], type="response")
predict returned[50,1]:
           O3
1    8.724965
2    8.813294
3    8.901624
...  8.989953
50  18.716007
predict after processing with nresponse=1 is [50,1]:
           O3
1    8.724965
2    8.813294
3    8.901624
...  8.989953
50  18.716007
Reducing trace level for subsequent degree1 plots
degree1 plot 2 ibh
degree1 plot 3 ibt
degree1 plot 4 vis
degree1 plot 5 doy
--plot.degree2(draw.plot=FALSE)
degree2 plot 1 vh:temp
newdata[400,9]:
          vh wind humidity temp    ibh dpg   ibt vis   doy
1   5320.000    5       64   25 2112.5  24 167.5 120 205.5
2   5353.158    5       64   25 2112.5  24 167.5 120 205.5
3   5386.316    5       64   25 2112.5  24 167.5 120 205.5
... 5419.474    5       64   25 2112.5  24 167.5 120 205.5
400 5950.000    5       64   93 2112.5  24 167.5 120 205.5
stats::predict(earth.object, data.frame[400,9], type="response")
predict returned[400,1]:
          O3
1   10.41649
2   10.28902
3   10.16155
... 10.03408
400 27.17075
predict after processing with nresponse=1 is [400,1]:
          O3
1   10.41649
2   10.28902
3   10.16155
... 10.03408
400 27.17075
Reducing trace level for subsequent degree2 plots
degree2 plot 2 vh:doy
degree2 plot 3 wind:vis
degree2 plot 4 humidity:temp
degree2 plot 5 temp:ibh
degree2 plot 6 temp:dpg
degree2 plot 7 temp:doy
degree2 plot 8 ibh:dpg
degree2 plot 9 ibt:vis
--done get.ylim.by.dummy.plots

ylim c(-33.06, 31.48)    clip TRUE

--plot.degree1(draw.plot=TRUE)
graphics::plot.default(x=c(25,26.39,27.7...), y=c(8.725,8.813,8...), type="n",
                       main="1 temp", xlab="", ylab="", xaxt="s", yaxt="s",
                       xlim=c(25,93), ylim=c(-33.06,31.48))

Execution halted
