> # test.plotmo.fac.R: test factor plotting in plotmo. This also tests swapxy, xflip, and yflip
> # Stephen Milborrow, Berea Mar 2011
> 
> library(plotmo)
> library(earth)
Loading required package: plotrix
> library(rpart)
> source("fast.postscript.R")
> data(ozone1)
> data(etitanic)
> options(warn=1) # print warnings as they occur
> if(!interactive())
+     fast.postscript(paper="letter")
Opening Rplots.ps 
> 
> cat("==test plotmo with factors==\n")
==test plotmo with factors==
> test.fac.with.rpart <- function(ngrid2=20)
+ {
+     et <- etitanic
+ 
+     col.response <- as.numeric(et$sex)+2
+     et$pclass.fac <- et$pclass
+     et$parch.num <- et$parch
+     parch.fac <- et$parch
+     parch.fac[parch.fac >= 3] <- 3
+     # use non alphabetically sorted factor levels
+     et$parch.fac <- factor(parch.fac, labels=c( "levz", "lev1", "lev2", "levf"))
+     et$pclass.num <- as.numeric(et$pclass)
+     et$pclass <- et$sex <- et$age <- et$sibsp <- et$parch <- NULL
+     cat("names(et):", names(et), "\n") # survived pclass.fac parch.num parch.fac pclass.num
+ 
+     old.par <- par(no.readonly=TRUE)
+     on.exit(par(old.par))
+     par(mfrow=c(4,5))
+     par(mar = c(2, 2, 3, 0.5), cex=.6)
+ 
+     # numeric x numeric
+     a2 <- rpart(survived ~ pclass.num+parch.num, data=et)
+     set.seed(145)
+     plotmo(a2, do.par=F, type2="im", degree1=2,
+            col.response=col.response, cex.response=.3, jitter.response=.3, pch.response=20)
+     set.seed(145)
+     plotmo(a2, do.par=F, type2="con", degree1=NA,
+            col.response=col.response, cex.response=.3, jitter.response=.3, pch.response=20)
+     set.seed(145)
+     plotmo(a2, do.par=F, type2="persp", degree1=NA,
+            ngrid2=40, theta=NA, ticktype="d", border=NA, cex.lab=.8, ntick=2)
+ 
+     # factor x numeric
+     a3 <- rpart(survived ~ pclass.fac+parch.num, data=et)
+     set.seed(145)
+     plotmo(a3, do.par=F, type2="im",
+            col.response=col.response, cex.response=.3, jitter.response=0, pch.response=20)
+     set.seed(145)
+     plotmo(a3, do.par=F, type2="con", degree1=NA, ylim=c(0,1),
+            col.response=col.response, cex.response=.3, jitter.response=0, pch.response=20)
+     set.seed(145)
+     plotmo(a3, do.par=F, type2="persp", degree1=NA,
+            ngrid2=40, theta=NA, ticktype="d", border=NA, cex.lab=.8, ntick=2)
+ 
+     # numeric x factor
+     a4 <- rpart(survived ~ pclass.num+parch.fac, data=et)
+     set.seed(145)
+     plotmo(a4, do.par=F, type2="im", tra=1,
+            col.response=col.response, cex.response=.3, jitter.response=.3, pch.response=20)
+     set.seed(145)
+     plotmo(a4, do.par=F, type2="con", degree1=NA,
+            col.response=col.response, cex.response=.3, jitter.response=.3, pch.response=20)
+     set.seed(145)
+     plotmo(a4, do.par=F, type2="persp", degree1=NA,
+            ngrid2=40, theta=NA, ticktype="d", border=NA, cex.lab=.8, ntick=2)
+ 
+     # factor x factor
+     a5 <- rpart(survived ~ pclass.fac+parch.fac, data=et)
+     set.seed(145)
+     plotmo(a5, do.par=F, type2="im", nrug=100,
+            col.response=col.response, cex.response=.3, jitter.response=1, pch.response=20)
+     set.seed(145)
+     plotmo(a5, do.par=F, type2="con", degree1=NA,
+            col.response=col.response, cex.response=.3, jitter.response=1, pch.response=20)
+     set.seed(145)
+     plotmo(a5, do.par=F, type2="persp", degree1=NA,
+            ngrid2=40, theta=NA, ticktype="d", border=NA, cex.lab=.8, ntick=2)
+ 
+     # test ndiscrete
+     par(mfrow=c(3,5))
+     par(mar = c(2, 2, 3, 0.5), cex=.6)
+ 
+     plotmo(a2, do.par=F, type2="persp", degree1=2, ndiscrete=0, main="ndiscrete=0",
+            theta=NA, ticktype="d", ntick=2,
+            col.response=col.response, cex.response=.3, jitter.response=.3, pch.response=20)
+     plotmo(a2, do.par=F, type2="im", degree1=NA, ndiscrete=0)
+     plotmo(a2, do.par=F, type2="con", degree1=NA, ndiscrete=0)
+     plotmo(a2, do.par=F, type2="persp", degree1=2, degree2=NA, ndiscrete=0, main="center", center=TRUE,
+            col.response=col.response, cex.response=.3, jitter.response=.3, pch.response=20)
+ 
+     plotmo(a2, do.par=F, type2="persp", degree1=2, ndiscrete=3, main="ndiscrete=3",
+            theta=NA, ticktype="d", ntick=2,
+            col.response=col.response, cex.response=.3, jitter.response=.3, pch.response=20)
+     plotmo(a2, do.par=F, type2="im", degree1=NA, ndiscrete=3)
+     plotmo(a2, do.par=F, type2="con", degree1=NA, ndiscrete=3)
+     plotmo(a2, do.par=F, type2="persp", degree1=2, degree2=NA, ndiscrete=3, main="center", center=TRUE,
+            col.response=col.response, cex.response=.3, jitter.response=.3, pch.response=20)
+ 
+     plotmo(a2, do.par=F, type2="persp", degree1=2, ndiscrete=10, main="ndiscrete=10",
+            theta=NA, ticktype="d", ntick=2,
+            col.response=col.response, cex.response=.3, jitter.response=.3, pch.response=20)
+     plotmo(a2, do.par=F, type2="im", degree1=NA, ndiscrete=10)
+     plotmo(a2, do.par=F, type2="con", degree1=NA, ndiscrete=10)
+     plotmo(a2, do.par=F, type2="persp", degree1=2, degree2=NA, ndiscrete=10, main="center", center=TRUE,
+            col.response=col.response, cex.response=.3, jitter.response=.3, pch.response=20)
+ }
> test.fac.with.rpart()
names(et): survived pclass.fac parch.num parch.fac pclass.num 

 grid:    pclass.num parch.num
                   2         0


 grid:    pclass.fac parch.num
                 1st         0


--get.plotmo.x for rpart object

get.data.for.formula: using x from "et" passed to rpart 
got x with colnames from object$call$formula

x[1046,2]:
     pclass.num parch.fac
1             1      levz
2             1      lev2
3             1      lev2
...           1      lev2
1309          3      levz

factors: parch.fac 

nlevels: pclass.num=3 parch.fac=4 

--get.plotmo.y for rpart object

got y from object$y
get.plotmo.y returned length 1046 min 0 max 1
             value 1 1 0 0 0 1 1 0 1 0 ...

clip.limits 0 1 

--plot.degree1(draw.plot=FALSE)

plotmo.predict(type="vector") for degree1 plot "pclass.num" with newdata[3,2]:
  pclass.num parch.fac
1          1      levz
2          2      levz
3          3      levz

factors: parch.fac 

predict.rpart(xgrid, type="vector") returned length 3 min 0.261477 max 0.6029412
                                    value 0.6029412 0.3157895 0.261477 

--plot.degree2(draw.plot=FALSE)

plotmo.predict(type="vector") for degree2 plot "pclass.num:parch.fac" with newdata[12,2]:
    pclass.num parch.fac
1            1      levz
2            2      levz
3            3      levz
...          1      lev1
3.3          3      levf

factors: parch.fac 

predict.rpart(xgrid, type="vector") returned length 12 min 0.261477 max 0.7483444
                                    value 0.6029412 0.3157895 0.261477 0.7483444 0.7483444 0.261477 0.7483444 0.7483444 0.261477 0.7483444 ...

ylim 0 1 

 grid:    pclass.num parch.fac
                   2      levz


 grid:    pclass.fac parch.fac
                 1st      levz


 grid:    pclass.num parch.num
                   2         0

Warning: forcing clip=FALSE because center=TRUE (a limitation of the current implementation)

 grid:    pclass.num parch.num
                   2         0


 grid:    pclass.num parch.num
                   2         0

Warning: forcing clip=FALSE because center=TRUE (a limitation of the current implementation)

 grid:    pclass.num parch.num
                   2         0


 grid:    pclass.num parch.num
                   2         0

Warning: forcing clip=FALSE because center=TRUE (a limitation of the current implementation)

 grid:    pclass.num parch.num
                   2         0

> cat("==test plotmo swapxy with factors==\n")
==test plotmo swapxy with factors==
> test.swapxy.with.rpart <- function(ngrid2=20)
+ {
+     et <- etitanic[c(1:50,300:350,600:650),]
+ 
+     col.response <- as.numeric(et$sex)+2
+     et$pclass.fac <- et$pclass
+     et$parch.num <- et$parch
+     parch.fac <- et$parch
+     parch.fac[parch.fac > 2] <- 2
+     # use non alphabetically sorted factor levels
+     et$parch.fac <- factor(parch.fac, labels=c("lev.zero", "lev.one", "lev.two.or.more"))
+     print(et$parch.fac)
+     et$pclass.num <- as.numeric(et$pclass)
+     et$pclass <- et$sex <- et$age <- et$sibsp <- et$parch <- NULL
+     cat("names(et):", names(et), "\n") # survived pclass.fac parch.num parch.fac pclass.num
+ 
+     old.par <- par(no.readonly=TRUE)
+     on.exit(par(old.par))
+     par(mfrow=c(4,4))
+     par(mar = c(2, 3, 5, 0.5), cex=.6)
+ 
+     # factor x factor
+     a5 <- rpart(survived ~ pclass.fac+parch.fac, data=et)
+     for(swapxy in c(F,T)) {
+         for(xflip in c(F,T))
+             for(yflip in c(F,T)) {
+                 set.seed(145)
+                 plotmo(a5, do.par=F, type2="im", degree1=NA,
+                        swapxy=swapxy, xflip=xflip, yflip=yflip,
+                        main=paste("swapxy=", swapxy, "\nxflip=", xflip, "\nyflip=", yflip),
+                        col.response=col.response, cex.response=3, jitter.response=.3,
+                        pch.response=".")
+                 set.seed(145)
+                 plotmo(a5, do.par=F, type2="con", degree1=NA,
+                        swapxy=swapxy, xflip=xflip, yflip=yflip,
+                        main=paste("swapxy=", swapxy, "\nxflip=", xflip, "\nyflip=", yflip),
+                        col.response=col.response, cex.response=.3, jitter.response=.3, pch.response=20)
+             }
+     }
+     par(mfrow=c(2,2))
+     set.seed(146)
+     plotmo(a5, do.par=F, type2="persp", degree1=NA, trace=0,
+            swapxy=FALSE, main=paste("swapxy=", FALSE),
+            ngrid2=40, theta=145, ticktype="d", cex.lab=.8, ntick=5)
+     set.seed(146)
+     plotmo(a5, do.par=F, type2="persp", degree1=NA, trace=0,
+            swapxy=TRUE, main=paste("swapxy=", TRUE),
+            ngrid2=40, theta=145, ticktype="d", cex.lab=.8, ntick=5)
+     set.seed(146)
+     plotmo(a5, do.par=F, type2="im", degree1=2, trace=1,
+            swapxy=FALSE, main=paste("swapxy=", FALSE))
+ }
> test.swapxy.with.rpart()
  [1] lev.zero        lev.two.or.more lev.two.or.more lev.two.or.more
  [5] lev.two.or.more lev.zero        lev.zero        lev.zero       
  [9] lev.zero        lev.zero        lev.zero        lev.zero       
 [13] lev.zero        lev.zero        lev.zero        lev.one        
 [17] lev.one         lev.zero        lev.zero        lev.one        
 [21] lev.one         lev.zero        lev.zero        lev.zero       
 [25] lev.zero        lev.zero        lev.zero        lev.zero       
 [29] lev.zero        lev.zero        lev.zero        lev.zero       
 [33] lev.zero        lev.zero        lev.zero        lev.one        
 [37] lev.zero        lev.zero        lev.zero        lev.zero       
 [41] lev.zero        lev.zero        lev.zero        lev.zero       
 [45] lev.zero        lev.one         lev.one         lev.zero       
 [49] lev.zero        lev.zero        lev.zero        lev.one        
 [53] lev.one         lev.one         lev.two.or.more lev.zero       
 [57] lev.zero        lev.zero        lev.zero        lev.zero       
 [61] lev.zero        lev.zero        lev.two.or.more lev.one        
 [65] lev.one         lev.zero        lev.zero        lev.zero       
 [69] lev.zero        lev.zero        lev.zero        lev.two.or.more
 [73] lev.one         lev.one         lev.zero        lev.zero       
 [77] lev.zero        lev.zero        lev.zero        lev.zero       
 [81] lev.zero        lev.one         lev.two.or.more lev.zero       
 [85] lev.zero        lev.zero        lev.zero        lev.zero       
 [89] lev.two.or.more lev.one         lev.one         lev.zero       
 [93] lev.zero        lev.zero        lev.one         lev.zero       
 [97] lev.two.or.more lev.zero        lev.zero        lev.zero       
[101] lev.zero        lev.zero        lev.zero        lev.zero       
[105] lev.one         lev.one         lev.one         lev.two.or.more
[109] lev.zero        lev.zero        lev.zero        lev.zero       
[113] lev.one         lev.one         lev.zero        lev.zero       
[117] lev.zero        lev.zero        lev.zero        lev.zero       
[121] lev.zero        lev.zero        lev.zero        lev.zero       
[125] lev.one         lev.one         lev.one         lev.one        
[129] lev.zero        lev.zero        lev.zero        lev.zero       
[133] lev.zero        lev.zero        lev.zero        lev.zero       
[137] lev.zero        lev.zero        lev.zero        lev.zero       
[141] lev.zero        lev.zero        lev.zero        lev.zero       
[145] lev.zero        lev.zero        lev.zero        lev.zero       
[149] lev.zero        lev.zero        lev.zero        lev.zero       
Levels: lev.zero lev.one lev.two.or.more
names(et): survived pclass.fac parch.num parch.fac pclass.num 

--get.plotmo.x for rpart object

get.data.for.formula: using x from "et" passed to rpart 
got x with colnames from object$call$formula

x[152,2]:
    pclass.fac       parch.fac
1          1st        lev.zero
2          1st lev.two.or.more
3          1st lev.two.or.more
...        1st lev.two.or.more
711        3rd        lev.zero

factors: pclass.fac parch.fac 

nlevels: pclass.fac=3 parch.fac=3 

--get.plotmo.y for rpart object

got y from object$y
get.plotmo.y returned length 152 min 0 max 1
             value 1 1 0 0 0 1 1 0 1 0 ...

clip.limits 0 1 

--plot.degree1(draw.plot=FALSE)

plotmo.predict(type="vector") for degree1 plot "parch.fac" with newdata[3,2]:
  pclass.fac       parch.fac
1        1st        lev.zero
2        1st         lev.one
3        1st lev.two.or.more

factors: pclass.fac parch.fac 

predict.rpart(xgrid, type="vector") returned length 3 min 0.6363636 max 0.6666667
                                    value 0.6666667 0.6363636 0.6363636 

--plot.degree2(draw.plot=FALSE)

plotmo.predict(type="vector") for degree2 plot "pclass.fac:parch.fac" with newdata[9,2]:
    pclass.fac       parch.fac
1          1st        lev.zero
2          2nd        lev.zero
3          3rd        lev.zero
...        1st         lev.one
3.2        3rd lev.two.or.more

factors: pclass.fac parch.fac 

predict.rpart(xgrid, type="vector") returned length 9 min 0.1707317 max 0.8823529
                                    value 0.6666667 0.3235294 0.1707317 0.6363636 0.8823529 0.4 0.6363636 0.8823529 0.4 

ylim 0.1707317 0.8823529 

 grid:    pclass.fac parch.fac
                 1st  lev.zero

> 
> aflip <- earth(O3~vh + wind + humidity + temp, data=ozone1, degree=2)
> col.response<- ifelse(ozone1$O3 == 38, "red", "pink")
> 
> # test xflip arg, degree1 plots
> par(mfrow=c(2,2))
> set.seed(102)
> plotmo(aflip, degree1=1:2, degree2=0, do.par=F, col.response=col.response, pch.response=20, nrug=-1, ylab="O3", col.smooth="gray")

 grid:    vh wind humidity temp
        5760    5       64   62

> plotmo(aflip, degree1=1:2, degree2=F, do.par=F, col.response=col.response, pch.response=20, nrug=-1, ylab="O3", xflip=T, main="xflip=TRUE, degree1 plots", , col.smooth="gray")

 grid:    vh wind humidity temp
        5760    5       64   62

> 
> col.response<- ifelse(ozone1$O3 == 1, "green", "pink")
> 
> # test flip args, type2=persp
> par(mfrow=c(2,2))
> plotmo(aflip, degree1=0, degree2=2, do.par=F, ticktype="d")
> plotmo(aflip, degree1=0, degree2=2, do.par=F, tickt="d", swapxy=T, main="swapxy=TRUE")
> plot(0, 0, type="n", axes=FALSE, xlab="", ylab="")
> plot(0, 0, type="n", axes=FALSE, xlab="", ylab="")
> 
> # test swapxy args, type2=image
> par(mfrow=c(3,3))
> 
> plotmo(aflip, degree1=0, degree2=2, do.par=F, type2="im", col.response=col.response, pch.response=20, main="test swapxy on image plots\nreference plot")
> plotmo(aflip, degree1=0, degree2=2, do.par=F, type2="im", col.response=col.response, pch.response=20, swapxy=T, main="swapxy=T")
> plot(0, 0, type="n", axes=FALSE, xlab="", ylab="")
> 
> plotmo(aflip, degree1=0, degree2=2, do.par=F, type2="im", col.response=col.response, pch.response=20, xflip=T, main="xflip=T")
> plotmo(aflip, degree1=0, degree2=2, do.par=F, type2="im", col.response=col.response, pch.response=20, yflip=T, main="yflip=T")
> plotmo(aflip, degree1=0, degree2=2, do.par=F, type2="im", col.response=col.response, pch.response=20, xflip=T, yflip=T, main="xflip=T, yflip=T")
> 
> plotmo(aflip, degree1=0, degree2=2, do.par=F, type2="im", col.response=col.response, pch.response=20, swapxy=T, xflip=T, main="swapxy=T, xflip=T")
> plotmo(aflip, degree1=0, degree2=2, do.par=F, type2="im", col.response=col.response, pch.response=20, swapxy=T, yflip=T, main="swapxy=T, yflip=T")
> plotmo(aflip, degree1=0, degree2=2, do.par=F, type2="im", col.response=col.response, pch.response=20, swapxy=T, xflip=T, yflip=T, main="swapxy=T, xflip=T, yflip=T")
> 
> # test flip args, type2=contour
> plotmo(aflip, degree1=0, degree2=2, do.par=F, type2="con", col.response=col.response, pch.response=20, main="test flip on contour plots\nreference plot")
> plotmo(aflip, degree1=0, degree2=2, do.par=F, type2="con", col.response=col.response, pch.response=20, swapxy=T)
> plot(0, 0, type="n", axes=FALSE, xlab="", ylab="")
> 
> plotmo(aflip, degree1=0, degree2=2, do.par=F, type2="con", col.response=col.response, pch.response=20, xflip=T)
> plotmo(aflip, degree1=0, degree2=2, do.par=F, type2="con", col.response=col.response, pch.response=20, yflip=T)
> plotmo(aflip, degree1=0, degree2=2, do.par=F, type2="con", col.response=col.response, pch.response=20, xflip=T, yflip=T)
> 
> plotmo(aflip, degree1=0, degree2=2, do.par=F, type2="con", col.response=col.response, pch.response=20, swapxy=T, xflip=T)
> plotmo(aflip, degree1=0, degree2=2, do.par=F, type2="con", col.response=col.response, pch.response=20, swapxy=T, yflip=T)
> plotmo(aflip, degree1=0, degree2=2, do.par=F, type2="con", col.response=col.response, pch.response=20, swapxy=T, xflip=T, yflip=T)
> 
> # ordered factor
> 
> cat("==test plotmo with ordered factor==\n")
==test plotmo with ordered factor==
> par(mfcol=c(2,2))
> par(mar=c(3, 3, 3, 1))
> par(mgp=c(1.5, .5, 0))
> a <- lm(height~., data=Loblolly)
> termplot(a, partial.resid=T, rug=T, terms=2, main="Seed is an ordered factor") # compare to termplot
> plotmo(a, trace=0, do.par=F, col.resp="gray", nrug=T, all2=T)

 grid:    age Seed
         12.5  329

> 
> #---------------------------------------------------------------------------
> # test ndiscrete with integer and non integer predictors, with missing values
> 
> par(mfcol=c(2,4))
> par(mar=c(3, 3, 3, 1))
> par(mgp=c(1.5, .5, 0))
> et <- etitanic
> et$var <- et$parch
> et$var[et$var==1] <- 0 # want a "hole" in var's value, for testing
> et$var[1:3] <- 6
> cat("table(et$var):")
table(et$var):> print(table(et$var))

  0   2   3   4   5   6 
927  95   8   5   6   5 
> cat("\n")

> a <- earth(survived~var+age, data=et, degree=2, pm="none")
> 
> plotmo(a, trace=FALSE, ndiscrete=0,
+        main="integral var\n(var levels are 0 2 3 4 5 6)\nndiscrete=0", cex.lab=.8,
+        do.par=F, col.smooth="indianred", ticktype="d", clip=F, degree1=0, theta=40)
> 
> plotmo(a, trace=-1, ndiscrete=0,
+        do.par=F, col.smooth="indianred", ylim=c(-.5,1), degree2=0, degree1=1)
> 
> #------------
> plotmo(a, trace=0, ndiscrete=10,  main="integral var\nndiscrete=10", cex.lab=.8,
+        do.par=F, col.smooth="indianred", ticktype="d", clip=F, degree1=0, theta=40)
> 
> plotmo(a, trace=0, ndiscrete=10,
+        do.par=F, col.smooth="indianred", ylim=c(-.5,1), degree2=0, degree1=1)

 grid:    var age
            0  28

> 
> #------------
> et$var <- et$var / 2
> cat("table(et$var):")
table(et$var):> print(table(et$var))

  0   1 1.5   2 2.5   3 
927  95   8   5   6   5 
> cat("\n")

> a <- earth(survived~var+age, data=et, degree=2, pm="none")
> 
> plotmo(a, trace=0, ndiscrete=0,
+        main="integral var\n(var levels are 0 1 1.5 2 2.5 3)\nndiscrete=0", cex.lab=.8,
+        do.par=F, col.smooth="indianred", ticktype="d", clip=F, degree1=0, theta=40)
> 
> plotmo(a, trace=0, ndiscrete=0,
+        do.par=F, col.smooth="indianred", ylim=c(-.5,1), degree2=0, degree1=1)

 grid:    var age
            0  28

> 
> #------------
> plotmo(a, trace=0, ndiscrete=10, main="non integral var\nndiscrete=10", cex.lab=.8,
+        do.par=F, col.smooth="indianred", ticktype="d", clip=F, degree1=0, theta=40)
> 
> plotmo(a, trace=0, ndiscrete=10,
+        do.par=F, col.smooth="indianred", ylim=c(-.5,1), degree2=0, degree1=1)

 grid:    var age
            0  28

> 
> if(!interactive()) {
+     dev.off()         # finish postscript plot
+     q(runLast=FALSE)  # needed else R prints the time on exit (R2.5 and higher) which messes up the diffs
+ }
