> # test.plotmo.R: regression tests for plotmo
> # Many of these tests are culled from man page examples and modified to try to confuse plotmo.
> # Many of the plots are plotted twice so you can visually check by comparing
> # plots in the same window, they should be substantially the same.
> # Stephen Milborrow, Petaluma Jan 2007
> 
> print(R.version.string)
[1] "R version 2.12.0 (2010-10-15)"
> print(citation("rpart.plot"))

To cite package 'rpart.plot' in publications use:

  Stephen Milborrow (). rpart.plot: Plot rpart models.  An enhanced
  version of plot.rpart.. R package version 1.2-2.
  http://www.milbo.org/rpart-plot

A BibTeX entry for LaTeX users is

  @Manual{,
    title = {rpart.plot: Plot rpart models.  An enhanced version of plot.rpart.},
    author = {Stephen Milborrow},
    note = {R package version 1.2-2},
    url = {http://www.milbo.org/rpart-plot},
  }

ATTENTION: This citation information has been auto-generated from the
package DESCRIPTION file and may need manual editing, see
'help("citation")' .

Warning message:
In citation("rpart.plot") :
  no date field in DESCRIPTION file of package 'rpart.plot'
> 
> Trace <- 0
> 
> dopar <- function(nrows, ncols, caption = "")
+ {
+     cat("                             ", caption, "\n")
+     earth:::make.space.for.caption(caption)
+     par(mfrow=c(nrows, ncols))
+     par(mar = c(3, 3, 1.7, 0.5))
+     par(mgp = c(1.6, 0.6, 0))
+     par(cex = 0.7)
+ }
> library(earth)
Loading required package: leaps
Loading required package: plotmo
Loading required package: plotrix
Warning message:
package 'plotrix' was built under R version 2.12.2 
> data(ozone1)
> data(etitanic)
> options(warn=1) # print warnings as they occur
> if(!interactive())
+     postscript(paper="letter")
> 
> caption <- "basic earth test of plotmo"
> a <- earth(O3 ~ ., data=ozone1, degree=2)
> plotmo(a, degree1=2, degree2=4, caption=caption, trace=TRUE)

--get.plotmo.x

get.formula.data: got x from data passed to original call to earth 
got x with colnames from object$call$formula

x[330,9]:
    vh wind humidity temp  ibh dpg ibt vis doy
1 5710    4       28   40 2693 -25  87 250  33
2 5700    3       37   45  590 -24 128 100  34
3 5760    3       51   54 1450  25 139  60  35

--get.plotmo.y

get.formula.data: got y from data passed to original call to earth 
got y from object$call$formula
get.plotmo.y returned length 330 min 1 max 38 values 3 5 5 6 4 4 6 7 4 6 ...

clip.limits 1 38 

--plot.degree1(draw.plot=FALSE)

plotmo.predict(type="response") for predictor "ibt" with newdata[500,9]:
    vh wind humidity temp    ibh dpg       ibt vis   doy
1 5760    5       64   62 2112.5  24 -25.00000 120 205.5
2 5760    5       64   62 2112.5  24 -24.28457 120 205.5
3 5760    5       64   62 2112.5  24 -23.56914 120 205.5

predict() returned "O3" length 500 min 3.947176 max 15.71664 values 3.947176 3.979812 4.012449 4.045085 4.077722 4.110359 4.142995 4.175632 4.208268 4.240905 ...

--plot.degree2(draw.plot=FALSE)

plotmo.predict(type="response") for predictors "ibh" and "dpg" with newdata[400,9]:
    vh wind humidity temp      ibh dpg   ibt vis   doy
1 5760    5       64   62 111.0000 -69 167.5 120 205.5
2 5760    5       64   62 368.3158 -69 167.5 120 205.5
3 5760    5       64   62 625.6316 -69 167.5 120 205.5

predict() returned "O3" length 400 min 5.537547 max 14.25387 values 5.537547 7.878725 10.21990 12.56108 14.25387 14.25387 14.25387 14.25387 14.25387 14.25387 ...

ylim 3.947176 15.71664 

 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5

persp(ibh:dpg) theta 235 ylim 3.95 15.7 cex 0.83 phi 30
> 
> caption <- "test 5 x 5 layout"
> dopar(1,1,caption)
                              test 5 x 5 layout 
> a <- earth(O3 ~ ., data=ozone1, nk=51, pmethod="n", degree=2)
> plotmo(a, xlab="", ylab="", caption=caption, trace=1)

--get.plotmo.x

get.formula.data: got x from data passed to original call to earth 
got x with colnames from object$call$formula

x[330,9]:
    vh wind humidity temp  ibh dpg ibt vis doy
1 5710    4       28   40 2693 -25  87 250  33
2 5700    3       37   45  590 -24 128 100  34
3 5760    3       51   54 1450  25 139  60  35

--get.plotmo.y

get.formula.data: got y from data passed to original call to earth 
got y from object$call$formula
get.plotmo.y returned length 330 min 1 max 38 values 3 5 5 6 4 4 6 7 4 6 ...

clip.limits 1 38 

--plot.degree1(draw.plot=FALSE)

plotmo.predict(type="response") for predictor "temp" with newdata[500,9]:
    vh wind humidity     temp    ibh dpg   ibt vis   doy
1 5760    5       64 25.00000 2112.5  24 167.5 120 205.5
2 5760    5       64 25.13627 2112.5  24 167.5 120 205.5
3 5760    5       64 25.27255 2112.5  24 167.5 120 205.5

predict() returned "O3" length 500 min -52.26858 max 18.74451 values 9.631048 9.637125 9.6432 9.649277 9.655353 9.66143 9.667506 9.673582 9.679659 9.685735 ...

--plot.degree2(draw.plot=FALSE)

plotmo.predict(type="response") for predictors "vh" and "temp" with newdata[400,9]:
        vh wind humidity temp    ibh dpg   ibt vis   doy
1 5320.000    5       64   25 2112.5  24 167.5 120 205.5
2 5353.158    5       64   25 2112.5  24 167.5 120 205.5
3 5386.316    5       64   25 2112.5  24 167.5 120 205.5

predict() returned "O3" length 400 min -77.76078 max 32.37834 values 8.873429 8.930522 8.987615 9.044709 9.101802 9.158895 9.215989 9.273082 9.330176 9.387269 ...

ylim 1.017623 36.30875 

 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5

persp(vh:temp) theta 235 ylim 1.02 36.3 cex 0.66 phi 30
persp(vh:vis) theta 235 ylim 1.02 36.3 cex 0.66 phi 30
persp(vh:doy) theta -35 ylim 1.02 36.3 cex 0.66 phi 30
persp(wind:temp) theta 145 ylim 1.02 36.3 cex 0.66 phi 30
persp(wind:ibt) theta -35 ylim 1.02 36.3 cex 0.66 phi 30
persp(wind:vis) theta 145 ylim 1.02 36.3 cex 0.66 phi 30
persp(humidity:temp) theta 145 ylim 1.02 36.3 cex 0.66 phi 30
persp(humidity:ibt) theta -35 ylim 1.02 36.3 cex 0.66 phi 30
persp(temp:dpg) theta 235 ylim 1.02 36.3 cex 0.66 phi 30
persp(temp:ibt) theta 235 ylim 1.02 36.3 cex 0.66 phi 30
persp(temp:vis) theta 145 ylim 1.02 36.3 cex 0.66 phi 30
persp(temp:doy) theta -35 ylim 1.02 36.3 cex 0.66 phi 30
persp(ibh:dpg) theta 235 ylim 1.02 36.3 cex 0.66 phi 30
persp(ibh:ibt) theta 55 ylim 1.02 36.3 cex 0.66 phi 30
persp(dpg:vis) theta 55 ylim 1.02 36.3 cex 0.66 phi 30
persp(ibt:vis) theta -35 ylim 1.02 36.3 cex 0.66 phi 30
> 
> caption <- "test 4 x 4 layout with ylab"
> dopar(1,1,caption)
                              test 4 x 4 layout with ylab 
> a <- earth(O3 ~ ., data=ozone1, nk=30, pmethod="n", degree=2)
> plotmo(a, xlab="", ylab="ozone", caption=caption, trace=Trace)

 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5

> 
> caption <- "test 3 x 3 layout"
> dopar(1,1,caption)
                              test 3 x 3 layout 
> a <- earth(O3 ~ ., data=ozone1, nk=16, pmethod="n", degree=2)
> plotmo(a, xlab="", ylab="", caption=caption, trace=Trace)

 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5

> 
> caption <- "test 2 x 2 layout"
> dopar(1,1,caption)
                              test 2 x 2 layout 
> a <- earth(O3 ~ ., data=ozone1, nk=9, pmethod="n", degree=2)
> plotmo(a, xlab="", ylab="", caption=caption, trace=Trace)

 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5

> 
> caption <- "test 1 x 1 layout"
> dopar(1,1,caption)
                              test 1 x 1 layout 
> a <- earth(O3 ~ ., data=ozone1, nk=4, pmethod="n", degree=2)
> plotmo(a, xlab="", ylab="", caption=caption, trace=Trace)

 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5

> 
> caption <- "test plotmo basic params"
> a <- earth(O3 ~ ., data=ozone1, degree=2)
> dopar(3,2,caption)
                              test plotmo basic params 
> set.seed(1) # needed for reproducibility because of sample for rug in plotmo
> plotmo(a, do.par=FALSE, degree1=1, nrug=-1, degree2=F, caption=caption,
+         main="test main", xlab="test xlab", ylab="test ylab", trace=Trace)

 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5

> set.seed(1)
> plotmo(a, do.par=FALSE, degree1=F, degree2=4, grid.func=mean, col.persp="white", ngrid2=10, phi=40, trace=Trace)
> set.seed(1)
> plotmo(a, do.par=FALSE, degree1=1, lty.degree1=2, col.degree1=2, nrug=50, degree2=F, main="nrug=50", trace=Trace)

 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5

> set.seed(1)
> plotmo(a, do.par=FALSE, degree1=1, nrug=-1, degree2=F, main="nrug=-1", trace=Trace)

 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5

> set.seed(1)
> plotmo(a, do.par=FALSE, degree1=1, nrug=20, ngrid1=50, degree2=F, main="ngrid1=50 nrug=20", trace=Trace)

 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5

> plotmo(a, do.par=FALSE, degree1=NA, degree2=1, phi=60, box=F, r=100) # dots args
> 
> caption <- "test plotmo ylim"
> a <- earth(O3 ~ ., data=ozone1, degree=2)
> dopar(3,3,caption)
                              test plotmo ylim 
> plotmo(a, do.par=FALSE, degree1=2:3, degree2=4, caption=caption, xlab="ylim=default", trace=Trace)

 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5

> plotmo(a, do.par=FALSE, degree1=2:3, degree2=4, ylim=NA, xlab="ylim=NA", trace=Trace)

 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5

> plotmo(a, do.par=FALSE, degree1=2:3, degree2=4, ylim=c(0,20), xlab="ylim=c(0,20)", trace=Trace)

 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5

> 
> # term.plot calls predict.earth with an se parameter, even with termplot(se=FALSE)
> 
> caption <- "basic earth test against termplot"
> dopar(4,4,caption)
                              basic earth test against termplot 
> earth:::make.space.for.caption("test caption1")
> a <- earth(O3 ~ ., data=ozone1, degree=2)
> plotmo(a, do.par=FALSE, ylim=NA, caption=caption, degree2=FALSE, trace=Trace)

 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5

> cat("Ignore two warnings: predict.earth ignored argument \"se.fit\"\n")
Ignore two warnings: predict.earth ignored argument "se.fit"
> termplot(a)
Warning: predict.earth ignored unrecognized argument "se.fit"
> 
> caption <- "test change order of earth predictors and cex"
> dopar(4,4,caption)
                              test change order of earth predictors and cex 
> a <- earth(doy ~ humidity + temp + wind, data=ozone1, degree=2)
> plotmo(a, do.par=FALSE, ylim=NA, caption=caption, degree2=c(1,2), trace=Trace, cex=1)

 grid:    humidity temp wind
                64   62    5

> termplot(a)
Warning: predict.earth ignored unrecognized argument "se.fit"
> 
> caption <- "test all1=TRUE"
> a <- earth(doy ~ humidity + temp + wind, data=ozone1, degree=2)
> plotmo(a, caption=caption, all1=TRUE)

 grid:    humidity temp wind
                64   62    5

> caption <- "test all2=TRUE"
> print(summary(a))
Call: earth(formula=doy~humidity+temp+wind, data=ozone1, 
      degree=2)

                            coefficients
(Intercept)                   157.999815
h(humidity-28)                  1.697095
h(3-wind)                      51.628255
h(28-humidity) * h(temp-60)     1.848360
h(28-humidity) * h(60-temp)     0.970502
h(humidity-28) * h(61-temp)    -0.130054
h(humidity-77) * h(49-temp)     3.727939
h(41-humidity) * h(wind-3)     -0.943635

Selected 8 of 19 terms, and 3 of 3 predictors 
Importance: wind, humidity, temp
Number of terms at each degree of interaction: 1 2 5
GCV 8498.516    RSS 2498879    GRSq 0.2222847    RSq 0.3028199
> plotmo(a, caption=caption, all2=TRUE)

 grid:    humidity temp wind
                64   62    5

> 
> oz <- ozone1[150:200,c("O3","temp","humidity","ibh")]
> a.glob <- earth(O3~temp+humidity, data=oz, degree=2)
> ad.glob <- earth(oz[,2:3], oz[,1], degree=2)
> func1 <- function()
+ {
+     caption <- "test environments and finding the correct data"
+     dopar(6,4,caption)
+ 
+     plotmo(a.glob, do.par=FALSE, main="a.glob oz",
+           degree1=1, all2=1, degree2=1, type2="im", trace=T,
+           col.response=3, pch.response=20)
+ 
+     plotmo(ad.glob, do.par=FALSE, main="ad.glob oz",
+           degree1=1, all2=1, degree2=1, type2="im", trace=T,
+           col.response=3, pch.response=20)
+ 
+     a <- earth(O3~temp+humidity, data=oz, degree=2)
+     plotmo(a, do.par=FALSE, main="a oz",
+            degree1=1, all2=1, degree2=1, type2="im", trace=T,
+            col.response=3, pch.response=20)
+ 
+     ad <- earth(oz[,2:3], oz[,1], degree=2)
+     plotmo(ad, do.par=FALSE, main="ad oz",
+            degree1=1, all2=1, degree2=1, type2="im", trace=T,
+            col.response=3, pch.response=20)
+ 
+     oz.org <- oz
+     oz10 <- 10 * oz # multiply by 10 so we can see by the axis labels if right data is being used
+     oz <- oz10      # oz is now local to this function, but multiplied by 10
+     a.oz10 <- earth(O3~temp+humidity, data=oz, degree=2)
+     a.oz10.keep <- earth(O3~temp+humidity, data=oz, degree=2, keepxy=TRUE)
+     plotmo(a.oz10, do.par=FALSE, main="a oz10",
+            degree1=1, all2=1, degree2=1, type2="im", trace=T,
+            col.response=3, pch.response=20)
+ 
+     ad.oz10 <- earth(oz[,2:3], oz[,1], degree=2)
+     ad.oz10.keep <- earth(oz[,2:3], oz[,1], degree=2, keepxy=TRUE)
+     plotmo(ad.oz10, do.par=FALSE, main="ad oz10",
+            degree1=1, all2=1, degree2=1, type2="im", trace=T,
+            col.response=3, pch.response=20)
+ 
+     func2 <- function() {
+         a.func <- earth(O3~temp+humidity, data=oz10, degree=2)
+         plotmo(a.func, do.par=FALSE, main="a.func oz10",
+                degree1=1, all2=1, degree2=1, type2="im", trace=T,
+                col.response=3, pch.response=20)
+ 
+         ad.func <- earth(oz10[,2:3], oz10[,1], degree=2)
+         plotmo(ad.func, do.par=FALSE, main="ad.func oz10",
+                degree1=1, all2=1, degree2=1, type2="im", trace=T,
+                col.response=3, pch.response=20)
+ 
+         oz <- .1 * oz.org
+         a.func <- earth(O3~temp+humidity, data=oz, degree=2)
+         plotmo(a.func, do.par=FALSE, main="a.func oz.1",
+                degree1=1, all2=1, degree2=1, type2="im", trace=T,
+                col.response=3, pch.response=20)
+ 
+         ad.func <- earth(oz[,2:3], oz[,1], degree=2)
+         plotmo(ad.func, do.par=FALSE, main="ad.func oz.1",
+                degree1=1, all2=1, degree2=1, type2="im", trace=T,
+                col.response=3, pch.response=20)
+ 
+         plotmo(a.oz10.keep, do.par=FALSE, main="func1:a.oz10.keep",
+            degree1=1, all2=1, degree2=1, type2="im", trace=T,
+            col.response=3, pch.response=20)
+ 
+         plotmo(ad.oz10.keep, do.par=FALSE, main="func1:ad.oz10.keep",
+            degree1=1, all2=1, degree2=1, type2="im", trace=T,
+            col.response=3, pch.response=20)
+ 
+         cat("Expect error msg (because get.plotmo.x calculated using oz.1 i.e. func2.oz)\n")
+         try(plotmo(a.oz10, do.par=FALSE, main="func1:a.oz10",
+            degree1=1, all2=1, degree2=1, type2="im", trace=T,
+            col.response=3, pch.response=20))
+ 
+         cat("Expect error msg (because get.plotmo.x calculated using oz.1 i.e. func2.oz)\n")
+         try(plotmo(ad.oz10, do.par=FALSE, main="func1:ad.oz10",
+            degree1=1, all2=1, degree2=1, type2="im", trace=T,
+            col.response=3, pch.response=20))
+     }
+     func2()
+ }
> func1()
                              test environments and finding the correct data 

--get.plotmo.x

get.formula.data: got x from data passed to original call to earth 
got x with colnames from object$call$formula

x[51,2]:
    temp humidity
150   48       81
151   59       63
152   67       58

--get.plotmo.y

get.formula.data: got y from data passed to original call to earth 
got y from object$call$formula
get.plotmo.y returned length 51 min 2 max 34 values 2 12 22 17 26 27 14 11 23 26 ...

clip.limits 2 34 

--plot.degree1(draw.plot=FALSE)

plotmo.predict(type="response") for predictor "temp" with newdata[500,2]:
      temp humidity
1 48.00000       68
2 48.09018       68
3 48.18036       68

predict() returned "O3" length 500 min 16.55511 max 32.24305 values 27.9325 27.89823 27.86396 27.82969 27.79542 27.76115 27.72688 27.69261 27.65834 27.62408 ...

--plot.degree2(draw.plot=FALSE)

plotmo.predict(type="response") for predictors "temp" and "humidity" with newdata[400,2]:
      temp humidity
1 48.00000       33
2 50.36842       33
3 52.73684       33

predict() returned "O3" length 400 min -30.61358 max 34.72349 values 14.25222 14.25222 14.25222 14.25222 14.25222 14.25222 14.25222 14.25222 14.25222 14.25222 ...

ylim 2 34 

 grid:    temp humidity
            80       68


--get.plotmo.x

got x with colnames from object$call$x

x[51,2]:
    temp humidity
150   48       81
151   59       63
152   67       58

--get.plotmo.y

got y from object$call$y
get.plotmo.y returned length 51 min 2 max 34 values 2 12 22 17 26 27 14 11 23 26 ...

clip.limits 2 34 

--plot.degree1(draw.plot=FALSE)

plotmo.predict(type="response") for predictor "temp" with newdata[500,2]:
      temp humidity
1 48.00000       68
2 48.09018       68
3 48.18036       68

predict() returned "oz[,1]" length 500 min 16.55511 max 32.24305 values 27.9325 27.89823 27.86396 27.82969 27.79542 27.76115 27.72688 27.69261 27.65834 27.62408 ...

--plot.degree2(draw.plot=FALSE)

plotmo.predict(type="response") for predictors "temp" and "humidity" with newdata[400,2]:
      temp humidity
1 48.00000       33
2 50.36842       33
3 52.73684       33

predict() returned "oz[,1]" length 400 min -30.61358 max 34.72349 values 14.25222 14.25222 14.25222 14.25222 14.25222 14.25222 14.25222 14.25222 14.25222 14.25222 ...

ylim 2 34 

 grid:    temp humidity
            80       68


--get.plotmo.x

get.formula.data: got x from data passed to original call to earth 
got x with colnames from object$call$formula

x[51,2]:
    temp humidity
150   48       81
151   59       63
152   67       58

--get.plotmo.y

get.formula.data: got y from data passed to original call to earth 
got y from object$call$formula
get.plotmo.y returned length 51 min 2 max 34 values 2 12 22 17 26 27 14 11 23 26 ...

clip.limits 2 34 

--plot.degree1(draw.plot=FALSE)

plotmo.predict(type="response") for predictor "temp" with newdata[500,2]:
      temp humidity
1 48.00000       68
2 48.09018       68
3 48.18036       68

predict() returned "O3" length 500 min 16.55511 max 32.24305 values 27.9325 27.89823 27.86396 27.82969 27.79542 27.76115 27.72688 27.69261 27.65834 27.62408 ...

--plot.degree2(draw.plot=FALSE)

plotmo.predict(type="response") for predictors "temp" and "humidity" with newdata[400,2]:
      temp humidity
1 48.00000       33
2 50.36842       33
3 52.73684       33

predict() returned "O3" length 400 min -30.61358 max 34.72349 values 14.25222 14.25222 14.25222 14.25222 14.25222 14.25222 14.25222 14.25222 14.25222 14.25222 ...

ylim 2 34 

 grid:    temp humidity
            80       68


--get.plotmo.x

got x with colnames from object$call$x

x[51,2]:
    temp humidity
150   48       81
151   59       63
152   67       58

--get.plotmo.y

got y from object$call$y
get.plotmo.y returned length 51 min 2 max 34 values 2 12 22 17 26 27 14 11 23 26 ...

clip.limits 2 34 

--plot.degree1(draw.plot=FALSE)

plotmo.predict(type="response") for predictor "temp" with newdata[500,2]:
      temp humidity
1 48.00000       68
2 48.09018       68
3 48.18036       68

predict() returned "oz[,1]" length 500 min 16.55511 max 32.24305 values 27.9325 27.89823 27.86396 27.82969 27.79542 27.76115 27.72688 27.69261 27.65834 27.62408 ...

--plot.degree2(draw.plot=FALSE)

plotmo.predict(type="response") for predictors "temp" and "humidity" with newdata[400,2]:
      temp humidity
1 48.00000       33
2 50.36842       33
3 52.73684       33

predict() returned "oz[,1]" length 400 min -30.61358 max 34.72349 values 14.25222 14.25222 14.25222 14.25222 14.25222 14.25222 14.25222 14.25222 14.25222 14.25222 ...

ylim 2 34 

 grid:    temp humidity
            80       68


--get.plotmo.x

get.formula.data: got x from data passed to original call to earth 
got x with colnames from object$call$formula

x[51,2]:
    temp humidity
150  480      810
151  590      630
152  670      580

--get.plotmo.y

get.formula.data: got y from data passed to original call to earth 
got y from object$call$formula
get.plotmo.y returned length 51 min 20 max 340 values 20 120 220 170 260 270 140 110 230 260 ...

clip.limits 20 340 

--plot.degree1(draw.plot=FALSE)

plotmo.predict(type="response") for predictor "temp" with newdata[500,2]:
      temp humidity
1 480.0000      680
2 480.9018      680
3 481.8036      680

predict() returned "O3" length 500 min 165.5511 max 322.4305 values 279.325 278.9823 278.6396 278.2969 277.9542 277.6115 277.2688 276.9261 276.5834 276.2408 ...

--plot.degree2(draw.plot=FALSE)

plotmo.predict(type="response") for predictors "temp" and "humidity" with newdata[400,2]:
      temp humidity
1 480.0000      330
2 503.6842      330
3 527.3684      330

predict() returned "O3" length 400 min -306.1358 max 347.2349 values 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 ...

ylim 20 340 

 grid:    temp humidity
           800      680


--get.plotmo.x

got x with colnames from object$call$x

x[51,2]:
    temp humidity
150  480      810
151  590      630
152  670      580

--get.plotmo.y

got y from object$call$y
get.plotmo.y returned length 51 min 20 max 340 values 20 120 220 170 260 270 140 110 230 260 ...

clip.limits 20 340 

--plot.degree1(draw.plot=FALSE)

plotmo.predict(type="response") for predictor "temp" with newdata[500,2]:
      temp humidity
1 480.0000      680
2 480.9018      680
3 481.8036      680

predict() returned "oz[,1]" length 500 min 165.5511 max 322.4305 values 279.325 278.9823 278.6396 278.2969 277.9542 277.6115 277.2688 276.9261 276.5834 276.2408 ...

--plot.degree2(draw.plot=FALSE)

plotmo.predict(type="response") for predictors "temp" and "humidity" with newdata[400,2]:
      temp humidity
1 480.0000      330
2 503.6842      330
3 527.3684      330

predict() returned "oz[,1]" length 400 min -306.1358 max 347.2349 values 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 ...

ylim 20 340 

 grid:    temp humidity
           800      680


--get.plotmo.x

get.formula.data: got x from data passed to original call to earth 
got x with colnames from object$call$formula

x[51,2]:
    temp humidity
150  480      810
151  590      630
152  670      580

--get.plotmo.y

get.formula.data: got y from data passed to original call to earth 
got y from object$call$formula
get.plotmo.y returned length 51 min 20 max 340 values 20 120 220 170 260 270 140 110 230 260 ...

clip.limits 20 340 

--plot.degree1(draw.plot=FALSE)

plotmo.predict(type="response") for predictor "temp" with newdata[500,2]:
      temp humidity
1 480.0000      680
2 480.9018      680
3 481.8036      680

predict() returned "O3" length 500 min 165.5511 max 322.4305 values 279.325 278.9823 278.6396 278.2969 277.9542 277.6115 277.2688 276.9261 276.5834 276.2408 ...

--plot.degree2(draw.plot=FALSE)

plotmo.predict(type="response") for predictors "temp" and "humidity" with newdata[400,2]:
      temp humidity
1 480.0000      330
2 503.6842      330
3 527.3684      330

predict() returned "O3" length 400 min -306.1358 max 347.2349 values 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 ...

ylim 20 340 

 grid:    temp humidity
           800      680


--get.plotmo.x

got x with colnames from object$call$x

x[51,2]:
    temp humidity
150  480      810
151  590      630
152  670      580

--get.plotmo.y

got y from object$call$y
get.plotmo.y returned length 51 min 20 max 340 values 20 120 220 170 260 270 140 110 230 260 ...

clip.limits 20 340 

--plot.degree1(draw.plot=FALSE)

plotmo.predict(type="response") for predictor "temp" with newdata[500,2]:
      temp humidity
1 480.0000      680
2 480.9018      680
3 481.8036      680

predict() returned "oz10[,1]" length 500 min 165.5511 max 322.4305 values 279.325 278.9823 278.6396 278.2969 277.9542 277.6115 277.2688 276.9261 276.5834 276.2408 ...

--plot.degree2(draw.plot=FALSE)

plotmo.predict(type="response") for predictors "temp" and "humidity" with newdata[400,2]:
      temp humidity
1 480.0000      330
2 503.6842      330
3 527.3684      330

predict() returned "oz10[,1]" length 400 min -306.1358 max 347.2349 values 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 ...

ylim 20 340 

 grid:    temp humidity
           800      680


--get.plotmo.x

get.formula.data: got x from data passed to original call to earth 
got x with colnames from object$call$formula

x[51,2]:
    temp humidity
150  4.8      8.1
151  5.9      6.3
152  6.7      5.8

--get.plotmo.y

get.formula.data: got y from data passed to original call to earth 
got y from object$call$formula
get.plotmo.y returned length 51 min 0.2 max 3.4 values 0.2 1.2 2.2 1.7 2.6 2.7 1.4 1.1 2.3 2.6 ...

clip.limits 0.2 3.4 

--plot.degree1(draw.plot=FALSE)

plotmo.predict(type="response") for predictor "temp" with newdata[500,2]:
      temp humidity
1 4.800000      6.8
2 4.809018      6.8
3 4.818036      6.8

predict() returned "O3" length 500 min 1.655511 max 3.224305 values 2.79325 2.789823 2.786396 2.782969 2.779542 2.776115 2.772688 2.769261 2.765834 2.762408 ...

--plot.degree2(draw.plot=FALSE)

plotmo.predict(type="response") for predictors "temp" and "humidity" with newdata[400,2]:
      temp humidity
1 4.800000      3.3
2 5.036842      3.3
3 5.273684      3.3

predict() returned "O3" length 400 min -3.061358 max 3.472349 values 1.425222 1.425222 1.425222 1.425222 1.425222 1.425222 1.425222 1.425222 1.425222 1.425222 ...

ylim 0.2 3.4 

 grid:    temp humidity
             8      6.8


--get.plotmo.x

got x with colnames from object$call$x

x[51,2]:
    temp humidity
150  4.8      8.1
151  5.9      6.3
152  6.7      5.8

--get.plotmo.y

got y from object$call$y
get.plotmo.y returned length 51 min 0.2 max 3.4 values 0.2 1.2 2.2 1.7 2.6 2.7 1.4 1.1 2.3 2.6 ...

clip.limits 0.2 3.4 

--plot.degree1(draw.plot=FALSE)

plotmo.predict(type="response") for predictor "temp" with newdata[500,2]:
      temp humidity
1 4.800000      6.8
2 4.809018      6.8
3 4.818036      6.8

predict() returned "oz[,1]" length 500 min 1.655511 max 3.224305 values 2.79325 2.789823 2.786396 2.782969 2.779542 2.776115 2.772688 2.769261 2.765834 2.762408 ...

--plot.degree2(draw.plot=FALSE)

plotmo.predict(type="response") for predictors "temp" and "humidity" with newdata[400,2]:
      temp humidity
1 4.800000      3.3
2 5.036842      3.3
3 5.273684      3.3

predict() returned "oz[,1]" length 400 min -3.061358 max 3.472349 values 1.425222 1.425222 1.425222 1.425222 1.425222 1.425222 1.425222 1.425222 1.425222 1.425222 ...

ylim 0.2 3.4 

 grid:    temp humidity
             8      6.8


--get.plotmo.x

get.formula.data: got x from object$data 
got x with colnames from object$call$formula

x[51,2]:
    temp humidity
150  480      810
151  590      630
152  670      580

--get.plotmo.y

get.formula.data: got y from object$data 
got y from object$call$formula
get.plotmo.y returned length 51 min 20 max 340 values 20 120 220 170 260 270 140 110 230 260 ...

clip.limits 20 340 

--plot.degree1(draw.plot=FALSE)

plotmo.predict(type="response") for predictor "temp" with newdata[500,2]:
      temp humidity
1 480.0000      680
2 480.9018      680
3 481.8036      680

predict() returned "O3" length 500 min 165.5511 max 322.4305 values 279.325 278.9823 278.6396 278.2969 277.9542 277.6115 277.2688 276.9261 276.5834 276.2408 ...

--plot.degree2(draw.plot=FALSE)

plotmo.predict(type="response") for predictors "temp" and "humidity" with newdata[400,2]:
      temp humidity
1 480.0000      330
2 503.6842      330
3 527.3684      330

predict() returned "O3" length 400 min -306.1358 max 347.2349 values 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 ...

ylim 20 340 

 grid:    temp humidity
           800      680


--get.plotmo.x

got x with colnames from object$x

x[51,2]:
    temp humidity
150  480      810
151  590      630
152  670      580

--get.plotmo.y

got y from object$y
get.plotmo.y returned "oz[,1]" length 51 min 20 max 340 values 20 120 220 170 260 270 140 110 230 260 ...

clip.limits 20 340 

--plot.degree1(draw.plot=FALSE)

plotmo.predict(type="response") for predictor "temp" with newdata[500,2]:
      temp humidity
1 480.0000      680
2 480.9018      680
3 481.8036      680

predict() returned "oz[,1]" length 500 min 165.5511 max 322.4305 values 279.325 278.9823 278.6396 278.2969 277.9542 277.6115 277.2688 276.9261 276.5834 276.2408 ...

--plot.degree2(draw.plot=FALSE)

plotmo.predict(type="response") for predictors "temp" and "humidity" with newdata[400,2]:
      temp humidity
1 480.0000      330
2 503.6842      330
3 527.3684      330

predict() returned "oz[,1]" length 400 min -306.1358 max 347.2349 values 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 ...

ylim 20 340 

 grid:    temp humidity
           800      680

Expect error msg (because get.plotmo.x calculated using oz.1 i.e. func2.oz)

--get.plotmo.x

get.formula.data: got x from data passed to original call to earth 
got x with colnames from object$call$formula

x[51,2]:
    temp humidity
150  4.8      8.1
151  5.9      6.3
152  6.7      5.8

--get.plotmo.y

get.formula.data: got y from data passed to original call to earth 
got y from object$call$formula
get.plotmo.y returned length 51 min 0.2 max 3.4 values 0.2 1.2 2.2 1.7 2.6 2.7 1.4 1.1 2.3 2.6 ...

clip.limits 0.2 3.4 

--plot.degree1(draw.plot=FALSE)

plotmo.predict(type="response") for predictor "temp" with newdata[500,2]:
      temp humidity
1 4.800000      6.8
2 4.809018      6.8
3 4.818036      6.8

predict() returned "O3" length 500 min 142.5222 max 142.5222 values 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 ...
Warning: predicted values in the "temp" graph are out of ylim=(0.2, 3.4).
         Use clip=FALSE to make this warning go away.

--plot.degree2(draw.plot=FALSE)

plotmo.predict(type="response") for predictors "temp" and "humidity" with newdata[400,2]:
      temp humidity
1 4.800000      3.3
2 5.036842      3.3
3 5.273684      3.3

predict() returned "O3" length 400 min 142.5222 max 142.5222 values 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 ...
Error : all predicted values are out of the range of the original response, try clip=FALSE

Expect error msg (because get.plotmo.x calculated using oz.1 i.e. func2.oz)

--get.plotmo.x

got x with colnames from object$call$x

x[51,2]:
    temp humidity
150  4.8      8.1
151  5.9      6.3
152  6.7      5.8

--get.plotmo.y

got y from object$call$y
get.plotmo.y returned length 51 min 0.2 max 3.4 values 0.2 1.2 2.2 1.7 2.6 2.7 1.4 1.1 2.3 2.6 ...

clip.limits 0.2 3.4 

--plot.degree1(draw.plot=FALSE)

plotmo.predict(type="response") for predictor "temp" with newdata[500,2]:
      temp humidity
1 4.800000      6.8
2 4.809018      6.8
3 4.818036      6.8

predict() returned "oz[,1]" length 500 min 142.5222 max 142.5222 values 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 ...
Warning: predicted values in the "temp" graph are out of ylim=(0.2, 3.4).
         Use clip=FALSE to make this warning go away.

--plot.degree2(draw.plot=FALSE)

plotmo.predict(type="response") for predictors "temp" and "humidity" with newdata[400,2]:
      temp humidity
1 4.800000      3.3
2 5.036842      3.3
3 5.273684      3.3

predict() returned "oz[,1]" length 400 min 142.5222 max 142.5222 values 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 142.5222 ...
Error : all predicted values are out of the range of the original response, try clip=FALSE

> 
> caption <- "test earth formula versus x,y model"
> dopar(4,4,caption)
                              test earth formula versus x,y model 
> a <- earth(O3 ~ ., data=ozone1, degree=2)
> plotmo(a, do.par=FALSE, caption=caption, trace=Trace)

 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5

> a <- earth(ozone1[, -1], ozone1[,1], degree=2)
> plotmo(a, do.par=FALSE, trace=Trace)

 grid:    vh wind humidity temp    ibh dpg   ibt vis   doy
        5760    5       64   62 2112.5  24 167.5 120 205.5

> 
> # single predictor
> caption <- "test earth(O3~wind, data=ozone1, degree=2), single predictor"
> dopar(2,2,caption)
                              test earth(O3~wind, data=ozone1, degree=2), single predictor 
> a <- earth(O3~wind, data=ozone1, degree=2)
> plotmo(a, trace=Trace)

 grid:    wind
             5

> 
> caption = "se=2, earth(doy~humidity+temp+wind, data=ozone1) versus termplot (expect no se lines)"
> dopar(3,2,caption)
                              se=2, earth(doy~humidity+temp+wind, data=ozone1) versus termplot (expect no se lines) 
> a <- earth(doy~humidity + temp + wind, data=ozone1, degree=2)
> cat("Ignore warning: predict.earth ignored argument \"se\"\n")
Ignore warning: predict.earth ignored argument "se"
> termplot(a)
Warning: predict.earth ignored unrecognized argument "se.fit"
> cat("Ignore two warnings: predict.earth ignored argument \"se.fit\"\n")
Ignore two warnings: predict.earth ignored argument "se.fit"
> plotmo(a, se=2, do.par=FALSE, ylim=NA, degree2=c(1:2), clip=FALSE, caption=caption, trace=Trace)

 grid:    humidity temp wind
                64   62    5

Warning: predict.earth ignored unrecognized argument "se.fit"
Warning: predict.earth ignored unrecognized argument "se.fit"
> 
> # test fix to bug reported by Joe Retzer, FIXED Dec 7, 2007
> N <- 650
> set.seed(2007)
> q_4    <- runif(N, -1, 1)
> q_2102 <- runif(N, -1, 1)
> q_2104 <- runif(N, -1, 1)
> q_3105 <- runif(N, -1, 1)
> q_3106 <- runif(N, -1, 1)
> q_4104 <- runif(N, -1, 1)
> q_6101 <- runif(N, -1, 1)
> q_6103 <- runif(N, -1, 1)
> q_7104 <- runif(N, -1, 1)
> q_3109 <- runif(N, -1, 1)
> q_4103 <- runif(N, -1, 1)
> q_2111 <- runif(N, -1, 1)
> q_3107 <- runif(N, -1, 1)
> q_3101 <- runif(N, -1, 1)
> q_3104 <- runif(N, -1, 1)
> q_7107 <- runif(N, -1, 1)
> depIndex <- sin(1.0 * q_4 + rnorm(650, sd=.8)) + sin(1.8 * q_2102 + rnorm(650, sd=.8)) + sin(1.3 * q_2104 + rnorm(650, sd=.8)) + sin(1.4 * q_3105 + rnorm(650, sd=.8)) +
+             sin(1.5 * q_3106 + rnorm(650, sd=.8)) + sin(1.6 * q_4104 + rnorm(650, sd=.8)) + sin(1.8 * q_6101 + rnorm(650, sd=.8)) + sin(1.8 * q_6103 + rnorm(650, sd=.8)) +
+             sin(1.9 * q_7104 + rnorm(650, sd=.8)) + sin(2.0 * q_3109 + rnorm(650, sd=.8))
> 
> regDatCWD <- as.data.frame(cbind(depIndex, q_4, q_2102, q_2104, q_3105, q_3106, q_4104, q_6101, q_6103, q_7104, q_3109, q_4103, q_2111, q_3107, q_3101, q_3104, q_7107))
> earthobj <- earth(depIndex ~  q_4+q_2102+q_2104+q_3105+q_3106+q_4104+q_6101+q_6103+q_7104+q_3109+q_4103+q_2111+q_3107+q_3101+q_3104+q_7107, data=regDatCWD)
> print(summary(earthobj, digits = 2))
Call: earth(formula=depIndex~q_4+q_2102+q_2104+q_3105+q_3106+
      q_4104+q_6101+q_6103+q_7104+q_3109+q_4103+q_2111+
      q_3107+q_3101+q_3104+q_7107, data=regDatCWD)

                     coefficients
(Intercept)                   1.5
h(q_4-0.82106)               -6.9
h(0.82106-q_4)               -1.0
h(q_2102- -0.683071)          1.2
h(0.814086-q_2104)           -0.9
h(0.836135-q_3105)           -0.7
h(0.495726-q_3106)           -0.9
h(q_4104- -0.668481)          1.0
h(0.484017-q_6101)           -1.1
h(0.915239-q_6103)           -1.1
h(q_7104- -0.600984)          1.4
h(q_7104-0.547527)           -2.0
h(q_3109- -0.166017)          1.1
h(-0.166017-q_3109)          -0.9
h(q_2111-0.975377)          112.9
h(-0.676502-q_3107)           2.2
h(q_7107- -0.672598)          0.3

Selected 17 of 31 terms, and 13 of 16 predictors 
Importance: q_6103, q_4104, q_2102, q_7104, q_3109, q_6101, q_2104, q_4, q_3106, q_3105, ...
Number of terms at each degree of interaction: 1 16 (additive model)
GCV 2.5    RSS 1451    GRSq 0.54    RSq 0.58
> plotmo(earthobj)

 grid:    q_4     q_2102      q_2104      q_3105      q_3106     q_4104
   0.05726625 0.01725001 0.004659335 -0.01826179 -0.00913319 0.01401429
      q_6101     q_6103     q_7104      q_3109     q_4103     q_2111
 -0.04790454 0.03681165 0.01827148 -0.09899272 -0.0623349 0.01007481
      q_3107      q_3101       q_3104     q_7107
 -0.02481171 -0.07733527 -0.003053319 0.02821214

> 
> # long predictor names
> 
> a.rather.long.in.fact.very.long.name.q_4 <- q_4
> a.rather.long.in.fact.very.long.name.q_2102 <- q_2102
> a.rather.long.in.fact.very.long.name.q_2104 <- q_2104
> a.rather.long.in.fact.very.long.name.q_3105 <- q_3105
> a.rather.long.in.fact.very.long.name.q_3106 <- q_3106
> a.rather.long.in.fact.very.long.name.q_4104 <- q_4104
> a.rather.long.in.fact.very.long.name.q_6101 <- q_6101
> a.rather.long.in.fact.very.long.name.q_6103 <- q_6103
> a.rather.long.in.fact.very.long.name.q_7104 <- q_7104
> a.rather.long.in.fact.very.long.name.q_3109 <- q_3109
> a.rather.long.in.fact.very.long.name.q_4103 <- q_4103
> a.rather.long.in.fact.very.long.name.q_2111 <- q_2111
> a.rather.long.in.fact.very.long.name.q_3107 <- q_3107
> a.rather.long.in.fact.very.long.name.q_3101 <- q_3101
> a.rather.long.in.fact.very.long.name.q_3104 <- q_3104
> a.rather.long.in.fact.very.long.name.q_7107 <- q_7107
> a.rather.long.in.fact.very.long.name.for.the.response <- depIndex
> a.rather.long.in.fact.very.long.name.for.the.dataframe <-
+         as.data.frame(cbind(
+                 a.rather.long.in.fact.very.long.name.for.the.response,
+                 a.rather.long.in.fact.very.long.name.q_4,
+                 a.rather.long.in.fact.very.long.name.q_2102,
+                 a.rather.long.in.fact.very.long.name.q_2104,
+                 a.rather.long.in.fact.very.long.name.q_3105,
+                 a.rather.long.in.fact.very.long.name.q_3106,
+                 a.rather.long.in.fact.very.long.name.q_4104,
+                 a.rather.long.in.fact.very.long.name.q_6101,
+                 a.rather.long.in.fact.very.long.name.q_6103,
+                 a.rather.long.in.fact.very.long.name.q_7104,
+                 a.rather.long.in.fact.very.long.name.q_3109,
+                 a.rather.long.in.fact.very.long.name.q_4103,
+                 a.rather.long.in.fact.very.long.name.q_2111,
+                 a.rather.long.in.fact.very.long.name.q_3107,
+                 a.rather.long.in.fact.very.long.name.q_3101,
+                 a.rather.long.in.fact.very.long.name.q_3104,
+                 a.rather.long.in.fact.very.long.name.q_7107))
> 
> a.rather.long.in.fact.very.long.name.for.the.modelA <-
+         earth(a.rather.long.in.fact.very.long.name.for.the.response ~
+                 a.rather.long.in.fact.very.long.name.q_4 +
+                 a.rather.long.in.fact.very.long.name.q_2102 +
+                 a.rather.long.in.fact.very.long.name.q_2104 +
+                 a.rather.long.in.fact.very.long.name.q_3105 +
+                 a.rather.long.in.fact.very.long.name.q_3106 +
+                 a.rather.long.in.fact.very.long.name.q_4104 +
+                 a.rather.long.in.fact.very.long.name.q_6101 +
+                 a.rather.long.in.fact.very.long.name.q_6103 +
+                 a.rather.long.in.fact.very.long.name.q_7104 +
+                 a.rather.long.in.fact.very.long.name.q_3109 +
+                 a.rather.long.in.fact.very.long.name.q_4103 +
+                 a.rather.long.in.fact.very.long.name.q_2111 +
+                 a.rather.long.in.fact.very.long.name.q_3107 +
+                 a.rather.long.in.fact.very.long.name.q_3101 +
+                 a.rather.long.in.fact.very.long.name.q_3104 +
+                 a.rather.long.in.fact.very.long.name.q_7107,
+                 data = a.rather.long.in.fact.very.long.name.for.the.dataframe, minspan=-1)
> print(summary(a.rather.long.in.fact.very.long.name.for.the.modelA, digits = 2))
Call: earth(formula=a.rather.long.in.fact.very.long.name.for.the.response~
      a.rather.long.in.fact.very.long.name.q_4+a.rather.long.in.fact.very.long.name.q_2102+
      a.rather.long.in.fact.very.long.name.q_2104+a.rather.long.in.fact.very.long.name.q_3105+
      a.rather.long.in.fact.very.long.name.q_3106+a.rather.long.in.fact.very.long.name.q_4104+
      a.rather.long.in.fact.very.long.name.q_6101+a.rather.long.in.fact.very.long.name.q_6103+
      a.rather.long.in.fact.very.long.name.q_7104+a.rather.long.in.fact.very.long.name.q_3109+
      a.rather.long.in.fact.very.long.name.q_4103+a.rather.long.in.fact.very.long.name.q_2111+
      a.rather.long.in.fact.very.long.name.q_3107+a.rather.long.in.fact.very.long.name.q_3101+etc.

                                                          coefficients
(Intercept)                                                      -1.17
h(a.rather.long.in.fact.very.long.name.q_4-0.791129)             -5.90
h(0.791129-a.rather.long.in.fact.very.long.name.q_4)             -1.00
h(a.rather.long.in.fact.very.long.name.q_2102- -0.682452)         1.20
h(0.833322-a.rather.long.in.fact.very.long.name.q_2104)          -0.85
h(0.845208-a.rather.long.in.fact.very.long.name.q_3105)          -0.75
h(0.412852-a.rather.long.in.fact.very.long.name.q_3106)          -0.99
h(a.rather.long.in.fact.very.long.name.q_4104- -0.684352)         1.01
h(0.484017-a.rather.long.in.fact.very.long.name.q_6101)          -1.12
h(0.9131-a.rather.long.in.fact.very.long.name.q_6103)            -1.12
h(a.rather.long.in.fact.very.long.name.q_7104- -0.585057)         1.42
h(a.rather.long.in.fact.very.long.name.q_7104-0.542573)          -1.91
h(a.rather.long.in.fact.very.long.name.q_3109- -0.163231)         1.05
h(-0.163231-a.rather.long.in.fact.very.long.name.q_3109)         -0.97
h(a.rather.long.in.fact.very.long.name.q_2111- -0.65247)          2.02
h(0.69536-a.rather.long.in.fact.very.long.name.q_2111)            1.84
h(-0.696421-a.rather.long.in.fact.very.long.name.q_3107)          2.69
h(a.rather.long.in.fact.very.long.name.q_7107- -0.672466)         0.26

Selected 18 of 31 terms, and 13 of 16 predictors 
Importance: a.rather.long.in.fact.very.long.name.q_6103, a.rather.long.in.fact.very.long.name.q_4104, a.rather.long.in.fact.very.long.name.q_2102, a.rather.long.in.fact.very.long.name.q_7104, a.rather.long.in.fact.very.long.name.q_3109, a.rather.long.in.fact.very.long.name.q_6101, a.rather.long.in.fact.very.long.name.q_2104, a.rather.long.in.fact.very.long.name.q_4, a.rather.long.in.fact.very.long.name.q_3106, a.rather.long.in.fact.very.long.name.q_3105, ...
Number of terms at each degree of interaction: 1 17 (additive model)
GCV 2.5    RSS 1443    GRSq 0.54    RSq 0.58
> plot(a.rather.long.in.fact.very.long.name.for.the.modelA)
> plotmo(a.rather.long.in.fact.very.long.name.for.the.modelA)

 grid:    a.rather.long.in.fact.very.long.name.q_4
                                        0.05726625
 a.rather.long.in.fact.very.long.name.q_2102
                                  0.01725001
 a.rather.long.in.fact.very.long.name.q_2104
                                 0.004659335
 a.rather.long.in.fact.very.long.name.q_3105
                                 -0.01826179
 a.rather.long.in.fact.very.long.name.q_3106
                                 -0.00913319
 a.rather.long.in.fact.very.long.name.q_4104
                                  0.01401429
 a.rather.long.in.fact.very.long.name.q_6101
                                 -0.04790454
 a.rather.long.in.fact.very.long.name.q_6103
                                  0.03681165
 a.rather.long.in.fact.very.long.name.q_7104
                                  0.01827148
 a.rather.long.in.fact.very.long.name.q_3109
                                 -0.09899272
 a.rather.long.in.fact.very.long.name.q_4103
                                  -0.0623349
 a.rather.long.in.fact.very.long.name.q_2111
                                  0.01007481
 a.rather.long.in.fact.very.long.name.q_3107
                                 -0.02481171
 a.rather.long.in.fact.very.long.name.q_3101
                                 -0.07733527
 a.rather.long.in.fact.very.long.name.q_3104
                                -0.003053319
 a.rather.long.in.fact.very.long.name.q_7107
                                  0.02821214

> 
> a.rather.long.in.fact.very.long.name.for.the.modelC <-
+         earth(x = a.rather.long.in.fact.very.long.name.for.the.dataframe[,-1],
+           y = a.rather.long.in.fact.very.long.name.for.the.response,
+                   degree = 3, minspan=-1)
> print(summary(a.rather.long.in.fact.very.long.name.for.the.modelC, digits = 2))
Call: earth(x=a.rather.long.in.fact.very.long.name.for.the.dataframe[, 
      -1], y=a.rather.long.in.fact.very.long.name.for.the.response, 
      degree=3, minspan=-1)

                                                                                                                                                                           coefficients
(Intercept)                                                                                                                                                                         3.1
h(a.rather.long.in.fact.very.long.name.q_4-0.791129)                                                                                                                              -10.7
h(0.791129-a.rather.long.in.fact.very.long.name.q_4)                                                                                                                               -1.0
h(a.rather.long.in.fact.very.long.name.q_2102- -0.682452)                                                                                                                           1.3
h(0.833322-a.rather.long.in.fact.very.long.name.q_2104)                                                                                                                            -0.8
h(0.845208-a.rather.long.in.fact.very.long.name.q_3105)                                                                                                                            -0.8
h(0.412852-a.rather.long.in.fact.very.long.name.q_3106)                                                                                                                            -0.9
h(a.rather.long.in.fact.very.long.name.q_4104- -0.684352)                                                                                                                           1.0
h(0.484017-a.rather.long.in.fact.very.long.name.q_6101)                                                                                                                            -1.1
h(0.9131-a.rather.long.in.fact.very.long.name.q_6103)                                                                                                                              -1.1
h(0.542573-a.rather.long.in.fact.very.long.name.q_7104)                                                                                                                            -1.6
h(a.rather.long.in.fact.very.long.name.q_3109- -0.163231)                                                                                                                           1.1
h(-0.163231-a.rather.long.in.fact.very.long.name.q_3109)                                                                                                                           -2.0
h(-0.696421-a.rather.long.in.fact.very.long.name.q_3107)                                                                                                                            2.6
h(-0.682452-a.rather.long.in.fact.very.long.name.q_2102) * h(a.rather.long.in.fact.very.long.name.q_3106- -0.133095)                                                                4.0
h(0.542573-a.rather.long.in.fact.very.long.name.q_7104) * h(a.rather.long.in.fact.very.long.name.q_2111- -0.476604)                                                                 0.7
h(-0.163231-a.rather.long.in.fact.very.long.name.q_3109) * h(0.822637-a.rather.long.in.fact.very.long.name.q_2111)                                                                  1.3
h(a.rather.long.in.fact.very.long.name.q_4-0.898656) * h(0.542573-a.rather.long.in.fact.very.long.name.q_7104) * h(a.rather.long.in.fact.very.long.name.q_2111- -0.476604)         39.4

Selected 18 of 33 terms, and 12 of 16 predictors 
Importance: a.rather.long.in.fact.very.long.name.q_6103, a.rather.long.in.fact.very.long.name.q_4104, a.rather.long.in.fact.very.long.name.q_2102, a.rather.long.in.fact.very.long.name.q_7104, a.rather.long.in.fact.very.long.name.q_3109, a.rather.long.in.fact.very.long.name.q_6101, a.rather.long.in.fact.very.long.name.q_2104, a.rather.long.in.fact.very.long.name.q_4, a.rather.long.in.fact.very.long.name.q_3106, a.rather.long.in.fact.very.long.name.q_3105, ...
Number of terms at each degree of interaction: 1 13 3 1
GCV 2.5    RSS 1388    GRSq 0.54    RSq 0.6
> plot(a.rather.long.in.fact.very.long.name.for.the.modelC)
> plotmo(a.rather.long.in.fact.very.long.name.for.the.modelC)

 grid:    a.rather.long.in.fact.very.long.name.q_4
                                        0.05726625
 a.rather.long.in.fact.very.long.name.q_2102
                                  0.01725001
 a.rather.long.in.fact.very.long.name.q_2104
                                 0.004659335
 a.rather.long.in.fact.very.long.name.q_3105
                                 -0.01826179
 a.rather.long.in.fact.very.long.name.q_3106
                                 -0.00913319
 a.rather.long.in.fact.very.long.name.q_4104
                                  0.01401429
 a.rather.long.in.fact.very.long.name.q_6101
                                 -0.04790454
 a.rather.long.in.fact.very.long.name.q_6103
                                  0.03681165
 a.rather.long.in.fact.very.long.name.q_7104
                                  0.01827148
 a.rather.long.in.fact.very.long.name.q_3109
                                 -0.09899272
 a.rather.long.in.fact.very.long.name.q_4103
                                  -0.0623349
 a.rather.long.in.fact.very.long.name.q_2111
                                  0.01007481
 a.rather.long.in.fact.very.long.name.q_3107
                                 -0.02481171
 a.rather.long.in.fact.very.long.name.q_3101
                                 -0.07733527
 a.rather.long.in.fact.very.long.name.q_3104
                                -0.003053319
 a.rather.long.in.fact.very.long.name.q_7107
                                  0.02821214

> 
> data(etitanic)
> a <- earth(survived ~ pclass+sex+age, data=etitanic, degree=2)
> print(summary(a))
Call: earth(formula=survived~pclass+sex+age, data=etitanic, 
      degree=2)

                    coefficients
(Intercept)           0.93220339
pclass3rd            -0.45851918
sexmale              -0.51079029
pclass2nd * sexmale  -0.26610468
pclass3rd * sexmale   0.19376843
sexmale * h(16-age)   0.03221793
sexmale * h(age-25)  -0.00471276

Selected 7 of 14 terms, and 4 of 4 predictors 
Importance: sexmale, pclass3rd, pclass2nd, age
Number of terms at each degree of interaction: 1 2 4
GCV 0.1447330    RSS 146.7947    GRSq 0.4020269    RSq 0.4190703
> plotmo(a, trace=Trace, caption="plotmo with facs: pclass+sex+age")

 grid:    pclass    sex age
             1st female  28

> plotmo(a, trace=Trace, clip=FALSE, degree2=FALSE, caption="plotmo (no degree2) with facs: pclass+sex+age")

 grid:    pclass    sex age
             1st female  28

> plotmo(a, trace=Trace, clip=FALSE, grid.levels=list(pclass="2n", sex="ma"),
+        caption="plotmo with grid.levels: pclass+sex+age")

 grid:    pclass  sex age
             2nd male  28

> # in above tests, all degree2 terms use facs
> # now build a model with some degree2 term that use facs, some that don't
> a <- earth(survived ~ pclass+age+sibsp, data=etitanic, degree=2)
> print(summary(a))
Call: earth(formula=survived~pclass+age+sibsp, data=etitanic, 
      degree=2)

                       coefficients
(Intercept)              0.75863837
pclass2nd               -0.29146432
pclass3rd               -0.46635067
pclass2nd * h(18-age)    0.03666191
pclass3rd * h(20-age)    0.02119903
h(18-age) * h(sibsp-2)  -0.02049700
h(age-18) * h(3-sibsp)  -0.00222502

Selected 7 of 17 terms, and 4 of 4 predictors 
Importance: pclass3rd, age, sibsp, pclass2nd
Number of terms at each degree of interaction: 1 2 4
GCV 0.2038010    RSS 206.7041    GRSq 0.1579841    RSq 0.1819833
> plotmo(a, caption="plotmo with mixed fac and non-fac degree2 terms", border=NA)

 grid:    pclass age sibsp
             1st  28     0

> plotmo(a, caption="plotmo with mixed fac and non-fac degree2 terms and grid.levels",
+        grid.levels=list(pclass="2n", age=20), # test partial matching of grid levels, and numeric preds
+        ticktype="d", nticks=2)

 grid:    pclass age sibsp
             2nd  20     0

> 
> # check detection of illegal grid.levels argument
> try(plotmo(a, grid.levels=list(pcla="1", pclass="2")))  # Expect error
Error : bad grid.levels argument ("pcla" and "pclass" both match "pclass")
> try(plotmo(a, grid.levels=list(pclass="1", pcla="2")))  # Expect error
Error : bad grid.levels argument ("pclass" and "pcla" both match "pclass")
> try(plotmo(a, grid.levels=list(pcla=1)))                # Expect error
Error : illegal level for "pcla" in grid.levels (specify factor levels with a string)
> try(plotmo(a, grid.levels=list(pcla=c("ab", "cd"))))    # Expect error
Error : illegal value for pclass in grid.levels
> try(plotmo(a, grid.levels=list(pcla=NA)))               # Expect error
Error : illegal value for pclass in grid.levels
> try(plotmo(a, grid.levels=list(pcla=Inf)))              # Expect error
Error : illegal level for "pcla" in grid.levels (specify factor levels with a string)
> try(plotmo(a, grid.levels=list(pcla=9)))                # Expect error
Error : illegal level for "pcla" in grid.levels (specify factor levels with a string)
> try(plotmo(a, grid.levels=list(age="ab")))              # Expect error
Error : illegal value for age in grid.levels
> try(plotmo(a, grid.levels=list(age=NA)))                # Expect error
Error : illegal value for age in grid.levels
> try(plotmo(a, grid.levels=list(age=Inf)))               # Expect error
Error : illegal value for age in grid.levels
> try(plotmo(a, grid.lev=list(age=list(1,2))))            # Expect error
Error : illegal value for age in grid.levels
> 
> # more-or-less repeat above, but with glm models
> a <- earth(survived ~ pclass+age+sibsp, data=etitanic, degree=2, glm=list(family=binomial))
> print(summary(a))
Call: earth(formula=survived~pclass+age+sibsp, data=etitanic, 
      glm=list(family=binomial), degree=2)

GLM coefficients
                          survived
(Intercept)             1.17548326
pclass2nd              -1.28653387
pclass3rd              -2.09991370
pclass2nd * h(18-age)   0.38059182
pclass3rd * h(20-age)   0.09857349
h(18-age) * h(sibsp-2) -0.13401139
h(age-18) * h(3-sibsp) -0.01084919

Earth selected 7 of 17 terms, and 4 of 4 predictors 
Importance: pclass3rd, age, sibsp, pclass2nd
Number of terms at each degree of interaction: 1 2 4
Earth GCV 0.2038010    RSS 206.7041    GRSq 0.1579841    RSq 0.1819833

GLM null.deviance 1414.620 (1045 dof)   deviance 1204.995 (1039 dof)   iters 7
> plotmo(a, ylim=c(0, 1), caption="plotmo glm with mixed fac and non-fac degree2 terms")

 grid:    pclass age sibsp
             1st  28     0

> plotmo(a, ylim=c(0, 1), caption="plotmo glm with mixed fac and non-fac degree2 terms and grid.levels",
+        grid.levels=list(pcl="2nd")) # test partial matching of variable name in grid levels

 grid:    pclass age sibsp
             2nd  28     0

> plotmo(a, type="earth", ylim=c(0, 1), caption="type=\"earth\" plotmo glm with mixed fac and non-fac degree2 terms")

 grid:    pclass age sibsp
             1st  28     0

> plotmo(a, type="link", ylim=c(0, 1), clip=FALSE, caption="type=\"link\" plotmo glm with mixed fac and non-fac degree2 terms")

 grid:    pclass age sibsp
             1st  28     0

> plotmo(a, type="class", ylim=c(0, 1), caption="type=\"class\" plotmo glm with mixed fac and non-fac degree2 terms")

 grid:    pclass age sibsp
             1st  28     0

> plotmo(a, ylim=c(0, 1), caption="default type (\"response\")\nplotmo glm with mixed fac and non-fac degree2 terms")

 grid:    pclass age sibsp
             1st  28     0

> # now with different type2's
> plotmo(a, do.par=FALSE, type2="persp",   theta=-20, degree1=FALSE, grid.levels=list(pclass="2nd"))
> plotmo(a, do.par=FALSE, type2="contour", degree1=FALSE, grid.levels=list(pclass="2nd"))
> plotmo(a, do.par=FALSE, type2="image",   degree1=FALSE, grid.levels=list(pclass="2nd"),
+        col.response=as.numeric(etitanic$survived)+2, pch.response=20)
> plotmo(a, do.par=FALSE, type="earth", type2="image", degree1=FALSE, grid.levels=list(pclass="2"))
> 
> # test vector main
> 
> a20 <- earth(O3 ~ humidity + temp + doy, data=ozone1, degree=2, glm=list(family=Gamma))
> 
> set.seed(1) # needed for nrug
> plotmo(a20, nrug=-1)

 grid:    humidity temp   doy
                64   62 205.5

> 
> set.seed(1) # needed for nrug
> plotmo(a20, nrug=-1, caption="Test plotmo with a vector main",
+        main=c("Humidity", "Temperature", "Day of year", "Humidity: Temperature", "Temperature: Day of Year"))

 grid:    humidity temp   doy
                64   62 205.5

> 
> set.seed(1) # needed for nrug
> cat("Expect warning below\n")
Expect warning below
> plotmo(a20, nrug=-1, caption="Test plotmo with a vector main, missing double titles",
+        main=c("Humidity", "Temperature", "Day of year", "Humidity: Temperature"))

 grid:    humidity temp   doy
                64   62 205.5

Warning: not enough elements in "main" (there are more plots than strings in "main")
> 
> set.seed(1) # needed for nrug
> cat("Expect warning below\n")
Expect warning below
> plotmo(a20, nrug=-1, caption="Test plotmo with a vector main, missing single titles",
+        main=c("Humidity", "Temperature"))

 grid:    humidity temp   doy
                64   62 205.5

Warning: not enough elements in "main" (there are more plots than strings in "main")
> 
> aflip <- earth(O3~vh + wind + humidity + temp, data=ozone1, degree=2)
> 
> # test all1 and all2, with and without degree1 and degree2
> plotmo(aflip, all2=T, caption="all2=T")

 grid:    vh wind humidity temp
        5760    5       64   62

> plotmo(aflip, all2=T, degree2=c(4, 2), caption="all2=T, degree2=c(4, 2)")

 grid:    vh wind humidity temp
        5760    5       64   62

> plotmo(aflip, all1=T, caption="all1=T")

 grid:    vh wind humidity temp
        5760    5       64   62

> plotmo(aflip, all1=T, degree1=c(3,1), degree2=NA, caption="all1=T, degree1=c(3,1), degree2=NA")

 grid:    vh wind humidity temp
        5760    5       64   62

> 
> try(plotmo(aflip, no.such.arg=9)) # expect Error: plotmo: illegal argument "no.such.arg"
Error : plotmo: illegal argument "no.such.arg"
> try(plotmo(aflip, degree1="all")) # Expect Error: degree1="all" is no longer legal, use all1=TRUE instead
Error : degree1="all" is no longer legal, use all1=TRUE instead
> try(plotmo(aflip, degree1="a"))   # Expect Error: degree1="all" is no longer legal, use all1=TRUE instead
Error : degree1="a" is no longer legal, use all1=TRUE instead
> try(plotmo(aflip, degree1="x"))   # Expect Error: degree1 must be an index vector (numeric or logical)
Error : degree1 must be an index vector (numeric or logical)
> try(plotmo(aflip, degree2="all")) # Expect Error: degree2="all" is no longer legal, use all2=TRUE instead
Error : degree2="all" is no longer legal, use all2=TRUE instead
> try(plotmo(aflip, ycolumn=1))     # Expect Error: ycolumn is no longer legal, use nresponse instead
Error : "ycolumn" is no longer legal, use "nresponse" instead
> try(plotmo(aflip, title="abc"))   # Expect Error: "title" is illegal, use "caption" instead
Error : "title" is illegal, use "caption" instead
> try(plotmo(aflip, ticktype="d", ntick=3, tic=3, tick=9)) # expect Error : duplicated arguments "ticktype" "tic" "tick"
Error : duplicated arguments "ticktype" "tic" "tick"
> try(plotmo(aflip, ticktype="d", ntick=3, tic=3)) # expect Error : duplicated arguments "ticktype" "tic"
Error : duplicated arguments "ticktype" "tic"
> try(plotmo(aflip, ticktype="s", nt=3)) # expect Error : nticks is illegal with ticktype="simple"

 grid:    vh wind humidity temp
        5760    5       64   62

Error : nticks is illegal with ticktype="simple"
> try(plotmo(aflip, tic="s", nt=3)) # expect Error : nticks is illegal with ticktype="simple"

 grid:    vh wind humidity temp
        5760    5       64   62

Error : nticks is illegal with ticktype="simple"
> try(plotmo(aflip, tic="s", nt=3)) # expect Error : nticks is illegal with ticktype="simple"

 grid:    vh wind humidity temp
        5760    5       64   62

Error : nticks is illegal with ticktype="simple"
> try(plotmo(aflip, adj=8, adj=9)) # Error : duplicated arguments "adj" "adj"
Error : duplicated arguments "adj" "adj"
> try(plotmo(aflip, adj1=8, adj2=9)) # Error : plotmo: illegal argument "adj1"
Error : plotmo: illegal argument "adj1"
> try(plotmo(aflip, yc=8, x2=9)) # expect Error : "ycolumn" is no longer legal, use "nresponse" instead
Error : "ycolumn" is no longer legal, use "nresponse" instead ("yc" taken to mean "ycolumn")
> try(plotmo(aflip, ticktype="d", ntick=3, ti=3)) # Error : "title" is illegal, use "caption" instead ("ti" taken to mean "title")
Error : "title" is illegal, use "caption" instead ("ti" taken to mean "title")
> try(plotmo(aflip, ticktype="d", ntick=3, title=3)) # Error : "title" is illegal, use "caption" instead
Error : "title" is illegal, use "caption" instead
> try(plotmo(aflip, ticktype="d", ntick=3, tit=3, titl=7)) # Error : "title" is illegal, use "caption" instead ("tit" taken to mean "title")
Error : "title" is illegal, use "caption" instead ("tit" taken to mean "title")
> try(plotmo(aflip, zlab="abc")) # expect Error : "zlab" is illegal, use "ylab" instead
Error : "zlab" is illegal, use "ylab" instead
> try(plotmo(aflip, z="abc")) # expect Error : "zlab" is illegal, use "ylab" instead ("z" taken to mean "zlab")
Error : "zlab" is illegal, use "ylab" instead ("z" taken to mean "zlab")
> try(plotmo(aflip, degree2="abc"))  # expect Error : degree2 must be an index vector (numeric or logical)
Error : degree2 must be an index vector (numeric or logical)
> try(plotmo(aflip, degree1=c(4,1))) # expect Error : out of range value in degree2 (allowed index range is 1:3)
Error : out of range value in "degree1" (allowed index range is 1:3)
> try(plotmo(aflip, none.such=TRUE)) # expect Error : illegal argument "all1"
Error : plotmo: illegal argument "none.such"
> 
> # test error reporting
> 
> lm.bad <- lm.fit(as.matrix(ozone1[,-1]), as.matrix(ozone1[,1]))
> try(plotmo(lm.bad))          # expect Error: get.plotmo.x.default cannot get the x matrix
Error : get.plotmo.x.default cannot get the x matrix --- tried object$x, object$call$formula, and object$call$x
> try(plotmo(lm.bad, trace=1)) # expect Error: get.plotmo.x.default cannot get the x matrix

--get.plotmo.x

Looked unsuccessfully for an x in the following places:

(i) object$x:
NULL

(ii) object$call$formula:
NULL

(iii) object$call$x:
NULL

Error : get.plotmo.x.default cannot get the x matrix --- tried object$x, object$call$formula, and object$call$x
> try(plotmo(99))              # expect Error: '99' is not a model object
Error : '99' is not a model object
> 
> if(!interactive()) {
+     dev.off()         # finish postscript plot
+     q(runLast=FALSE)  # needed else R prints the time on exit (R2.5 and higher) which messes up the diffs
+ }
